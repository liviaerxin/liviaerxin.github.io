"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[8183],{13531:e=>{e.exports=JSON.parse('{"permalink":"/blog/qemu-linux-kernel-boot","editUrl":"https://github.com/liviaerxin/liviaerxin.github.io/edit/main/blog/../../blog/qemu-linux-kernel-boot.mdx","source":"@site/../../blog/qemu-linux-kernel-boot.mdx","title":"QEMU Direct Linux Kernel Boot","description":"QEMU Linux Kernel Boot","date":"2024-09-26T00:00:00.000Z","tags":[{"inline":true,"label":"qemu","permalink":"/blog/tags/qemu"},{"inline":true,"label":"kernel","permalink":"/blog/tags/kernel"},{"inline":true,"label":"initramfs","permalink":"/blog/tags/initramfs"}],"readingTime":2.735,"hasTruncateMarker":true,"authors":[{"name":"Frank Chen","title":"Backend & Applied ML Engineer","url":"https://github.com/liviaerxin","imageURL":"https://github.com/liviaerxin.png","key":"frank","page":null}],"frontMatter":{"authors":["frank"],"tags":["qemu","kernel","initramfs"],"description":"QEMU Linux Kernel Boot","keywords":["QEMU Linux Kernel Boot"],"image":"https://i.imgur.com/mErPwqL.png","date":"2024-09-26T00:00:00.000Z","draft":false,"enableComments":true},"unlisted":false,"prevItem":{"title":"Inspect Shared Library","permalink":"/blog/inspect-shared-library"},"nextItem":{"title":"QEMU Emulate Raspberry Pi 3 and 4","permalink":"/blog/qemu-raspberry-pi"}}')},28453:(e,n,i)=>{i.d(n,{R:()=>t,x:()=>o});var r=i(96540);const s={},l=r.createContext(s);function t(e){const n=r.useContext(l);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:t(e.components),r.createElement(l.Provider,{value:n},e.children)}},96977:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>h,frontMatter:()=>t,metadata:()=>r,toc:()=>c});var r=i(13531),s=i(74848),l=i(28453);const t={authors:["frank"],tags:["qemu","kernel","initramfs"],description:"QEMU Linux Kernel Boot",keywords:["QEMU Linux Kernel Boot"],image:"https://i.imgur.com/mErPwqL.png",date:new Date("2024-09-26T00:00:00.000Z"),draft:!1,enableComments:!0},o="QEMU Direct Linux Kernel Boot",a={authorsImageUrls:[void 0]},c=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Build Linux kernel",id:"build-linux-kernel",level:2},{value:"Build root filesystem",id:"build-root-filesystem",level:2},{value:"Run QEMU",id:"run-qemu",level:2},{value:"Debug Linux kernel",id:"debug-linux-kernel",level:2},{value:"Resources",id:"resources",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["Here, I will employ QEMU to emulate a minimal ",(0,s.jsx)(n.strong,{children:"Linux x86_64"})," platform with a minimal root filesystem from scratch, as well as debugging with ",(0,s.jsx)(n.code,{children:"GDB"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Build ",(0,s.jsx)(n.strong,{children:"Linux x86_64"})," kernel"]}),"\n",(0,s.jsxs)(n.li,{children:["Build ",(0,s.jsx)(n.strong,{children:"Linux x86_64"})," rootfs(root filesystem)"]}),"\n",(0,s.jsx)(n.li,{children:"Run QEMU"}),"\n",(0,s.jsxs)(n.li,{children:["Debug with ",(0,s.jsx)(n.code,{children:"GDB"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Why do I use QEMU to boot Linux kernel directly with skipping BIOS/UEFI boot procedures?"}),"\n",(0,s.jsx)(n.p,{children:"Use QEMU to launch a Linux kernel directly without having to make a fully bootable disk image. This is very useful for:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Linux kernel testing"}),"\n",(0,s.jsx)(n.li,{children:"root filesystem testing"}),"\n",(0,s.jsx)(n.li,{children:"arm system emulation"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,s.jsx)(n.p,{children:"On Ubuntu,"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:"sudo apt-get install git fakeroot build-essential ncurses-dev xz-utils libssl-dev bc flex libelf-dev bison\n"})}),"\n",(0,s.jsxs)(n.p,{children:["On macOS, you need create a ",(0,s.jsx)(n.strong,{children:"Case Sensitive"})," filesystem and use ",(0,s.jsx)(n.strong,{children:"GNU GCC"})," instead of ",(0,s.jsx)(n.code,{children:"Clang"})," the following ways:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:'hdiutil create -size 20g -type SPARSE -fs "Case-sensitive HFS+" -volname brosx brosx.sparseimage\nhdiutil attach brosx.sparseimage\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:"hdiutil detach /Volumes/brosx -force\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:"brew install gpatch gcc flock attr libtool libart\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:"ln -s /opt/homebrew/bin/gcc-13 /opt/homebrew/bin/gcc\nn -s /opt/homebrew/bin/gcc-13 /opt/homebrew/bin/cc\nln -s /opt/homebrew/bin/g++-13 /opt/homebrew/bin/g++\nln -s /opt/homebrew/bin/g++-13 /opt/homebrew/bin/c++\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:"rm /opt/homebrew/bin/gcc /opt/homebrew/bin/cc /opt/homebrew/bin/g++ /opt/homebrew/bin/c++\n"})}),"\n",(0,s.jsx)(n.h2,{id:"build-linux-kernel",children:"Build Linux kernel"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:"wget https://cdn.kernel.org/pub/linux/kernel/v6.x/linux-6.1.55.tar.xz\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:"tar xvf linux-6.1.55.tar.xz\ncd linux-6.1.55\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:"# Use the default `x86_64` configuration file form `/x86/configs/x86_64_defconfig`\nmake ARCH=x86_64 x86_64_defconfig \n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:"# Tweak some options for GDB and initramfs\nmake menuconfig\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:"make -j8\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Generate kernel file ",(0,s.jsx)(n.code,{children:"./arch/x86/boot/bzImage"}),"."]}),"\n",(0,s.jsxs)(n.admonition,{type:"note",children:[(0,s.jsxs)(n.p,{children:["To extract ",(0,s.jsx)(n.code,{children:"vmlinux"})," from ",(0,s.jsx)(n.code,{children:"bzImage"}),","]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:"./scripts/extract-vmlinux ./arch/x86_64/boot/bzImage >./arch/x86_64/boot/vmlinux\n"})})]}),"\n",(0,s.jsx)(n.h2,{id:"build-root-filesystem",children:"Build root filesystem"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:"git clone https://github.com/buildroot/buildroot.git\ncd buildroot\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:"make menuconfig\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Choose ",(0,s.jsx)(n.code,{children:"x86_64"})," as Target Architecture and ",(0,s.jsx)(n.code,{children:"ext4"})," root file system."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:"make -j8\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Generate root filesystem disk ",(0,s.jsx)(n.code,{children:"./output/images/rootfs.ext4"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"run-qemu",children:"Run QEMU"}),"\n",(0,s.jsxs)(n.p,{children:["Copy ",(0,s.jsx)(n.code,{children:"bzImage"})," and ",(0,s.jsx)(n.code,{children:"rootfs.ext4"})," to any host machine with QEMU available."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:"rsync -l ./linux-6.1.55/arch/x86/boot/bzImage destination_directory/\nrsync -l ./buildroot/output/images/rootfs.ext4 destination_directory/\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:'kernel="$PWD/linux_qemu/x86_64/bzImage"\nvmlinuz="$PWD/linux_qemu/x86_64/vmlinux"\ninitrd="$PWD/linux_qemu/x86_64/rootfs.ext4"\nimg="$PWD/linux_qemu/x86_64/rootfs.ext4"\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:'qemu-system-x86_64 \\\n    -nographic \\\n    -m 4G \\\n    -kernel $kernel \\\n    -append "earlyprintk loglevel=8 root=/dev/zero console=ttyS0"\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:'qemu-system-x86_64 \\\n    -nographic \\\n    -m 4G \\\n    -kernel $kernel \\\n    -hda $img \\\n    -append "earlyprintk loglevel=8 root=/dev/sda rootfstype=ext4 console=ttyS0" \\\n    -netdev user,id=mynet,hostfwd=tcp::2222-:22 \\\n    -device virtio-net-pci,netdev=mynet\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Default password: ",(0,s.jsx)(n.code,{children:"root"})]}),"\n",(0,s.jsx)(n.h2,{id:"debug-linux-kernel",children:"Debug Linux kernel"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:'qemu-system-x86_64 \\\n    -s -S \\\n    -nographic \\\n    -m 4G \\\n    -kernel $kernel \\\n    -append "earlyprintk loglevel=8 root=/dev/zero console=ttyS0 nokaslr"\n'})}),"\n",(0,s.jsx)(n.p,{children:"Options in details,"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"-s"}),": allows port ",(0,s.jsx)(n.code,{children:"tcp::1234"})," for remote debug"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"-S"}),": stop CPU until continue from GDB what is connected to tcp ",(0,s.jsx)(n.code,{children:"1234"})," port"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"-append"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"nokaslr"}),": turn off ",(0,s.jsx)(n.strong,{children:"KASLR"})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Or with root filesystem,"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:'qemu-system-x86_64 \\\n    -nographic \\\n    -m 4G \\\n    -s -S \\\n    -kernel $kernel \\\n    -hda $img \\\n    -append "earlyprintk loglevel=8 root=/dev/sda rootfstype=ext4 console=ttyS0 nokaslr" \\\n    -netdev user,id=mynet,hostfwd=tcp::2222-:22 \\\n    -device virtio-net-pci,netdev=mynet\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Enter ",(0,s.jsx)(n.code,{children:"gdb"}),","]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:"$ gdb ./vmlinux\n"})}),"\n",(0,s.jsxs)(n.p,{children:["In ",(0,s.jsx)(n.code,{children:"gdb"})," shell,"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:'(gdb) target remote 10.6.64.243:1234\nRemote debugging using 10.6.64.243:1234\nwarning: No executable has been specified and target does not support\ndetermining executable automatically.  Try using the "file" command.\n0x000000000000fff0 in ?? ()\n(gdb) continue\nContinuing.\n'})}),"\n",(0,s.jsx)(n.h2,{id:"resources",children:"Resources"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://www.berrange.com/posts/2023/03/09/make-tiny-image-py-creating-tiny-initrds-for-testing-qemu-or-linux-kernel-userspace-behaviour/",children:"Daniel P. Berrang\xe9  \xbb Blog Archive   \xbb make-tiny-image.py: creating tiny initrds for testing QEMU or Linux kernel/userspace behaviour"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"https://github.com/dhruvvyas90/qemu-rpi-kernel",children:"GitHub - dhruvvyas90/qemu-rpi-kernel: Qemu kernel for emulating Rpi on QEMU"}),"\n",(0,s.jsx)(n.a,{href:"https://medicineyeh.wordpress.com/2016/03/29/buildup-your-arm-image-for-qemu/",children:"https://medicineyeh.wordpress.com/2016/03/29/buildup-your-arm-image-for-qemu/"})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://medium.com/@daeseok.youn/prepare-the-environment-for-developing-linux-kernel-with-qemu-c55e37ba8ade",children:"Prepare the environment for developing Linux kernel with qemu. | by DaeSeok Youn | Medium"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://bootlin.com/pub/conferences/2013/kernel-recipes/rootfs-kernel-developer/rootfs-kernel-developer.pdf"})})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);