"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[3555],{28453:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>c});var i=s(96540);const l={},r=i.createContext(l);function t(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:t(e.components),i.createElement(r.Provider,{value:n},e.children)}},86987:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>h,frontMatter:()=>t,metadata:()=>i,toc:()=>a});const i=JSON.parse('{"id":"wiki/wiki-assembly","title":"Wiki Assembly","description":"Wiki Assembly","source":"@site/../../docs/wiki/wiki-assembly.mdx","sourceDirName":"wiki","slug":"/wiki/wiki-assembly","permalink":"/docs/wiki/wiki-assembly","draft":false,"unlisted":false,"editUrl":"https://github.com/liviaerxin/liviaerxin.github.io/edit/master/_ssg/docusaurus/../../docs/wiki/wiki-assembly.mdx","tags":[{"inline":true,"label":"Wiki Assembly","permalink":"/docs/tags/wiki-assembly"}],"version":"current","lastUpdatedBy":"liviaerxin","lastUpdatedAt":1745347376000,"frontMatter":{"authors":["frank"],"tags":["Wiki Assembly"],"description":"Wiki Assembly","keywords":["Wiki Assembly"],"image":"https://i.imgur.com/mErPwqL.png","date":"2023-11-22T00:00:00.000Z","draft":false,"enableComments":true},"sidebar":"docs","previous":{"title":"Wiki","permalink":"/docs/category/wiki"},"next":{"title":"Wiki Compiler","permalink":"/docs/wiki/wiki-compiler"}}');var l=s(74848),r=s(28453);const t={authors:["frank"],tags:["Wiki Assembly"],description:"Wiki Assembly",keywords:["Wiki Assembly"],image:"https://i.imgur.com/mErPwqL.png",date:new Date("2023-11-22T00:00:00.000Z"),draft:!1,enableComments:!0},c="Wiki Assembly",d={},a=[{value:"Assembler",id:"assembler",level:2},{value:"Memory Layout",id:"memory-layout",level:2},{value:"Memory Layout of a Running Program",id:"memory-layout-of-a-running-program",level:2},{value:"Label",id:"label",level:2},{value:"Instruction",id:"instruction",level:2},{value:"Opcode",id:"opcode",level:3},{value:"Oprand",id:"oprand",level:3},{value:"Register Operand",id:"register-operand",level:4},{value:"Immediate Operand",id:"immediate-operand",level:4},{value:"Memory Operand",id:"memory-operand",level:4},{value:"Instruction Encoding",id:"instruction-encoding",level:3},{value:"NASM x86_64 cheat sheet",id:"nasm-x86_64-cheat-sheet",level:2},{value:"GAS aarch64 cheat sheet",id:"gas-aarch64-cheat-sheet",level:2},{value:"Assembly&#39;s Role in Compiler",id:"assemblys-role-in-compiler",level:2},{value:"Resources",id:"resources",level:2}];function o(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.header,{children:(0,l.jsx)(n.h1,{id:"wiki-assembly",children:"Wiki Assembly"})}),"\n",(0,l.jsxs)(n.p,{children:["Why ",(0,l.jsx)(n.code,{children:"Assembly"})," language is important to to learn?"]}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsxs)(n.li,{children:["The most low-level language that is closely tied to the hardware such as ",(0,l.jsx)(n.code,{children:"CPU"}),".","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"Assembly"})," code implements a symbolic (human-readable) representation of the binary machine code."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"Assembly"})," language is written to follow the ",(0,l.jsx)(n.code,{children:"CPU"})," execution logic directly."]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"Assembly"})," language facilities a deeper understanding how ",(0,l.jsx)(n.code,{children:"CPU"})," actually do its job."]}),"\n"]}),"\n",(0,l.jsxs)(n.p,{children:["Why ",(0,l.jsx)(n.code,{children:"Assembly"})," language is critical elementary foundation to other higher-level language, E.g. ",(0,l.jsx)(n.code,{children:"C"}),"?"]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"Assembly"})," code is the important medium for compiling ",(0,l.jsx)(n.code,{children:"C"})," code to machine code.\nWhen ",(0,l.jsx)(n.code,{children:"C"})," program being compiled to an binary object file, the ",(0,l.jsx)(n.code,{children:"GCC"})," compiler will do following:"]}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"C"})," code will be compiled into ",(0,l.jsx)(n.code,{children:"Assembly"})," code"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"Assembly"})," code will be translated into machine code"]}),"\n"]}),"\n",(0,l.jsxs)(n.p,{children:["Is ",(0,l.jsx)(n.code,{children:"Assembly"})," language cross-platform?"]}),"\n",(0,l.jsxs)(n.p,{children:["No, ",(0,l.jsx)(n.code,{children:"Assembly"})," language is specific in the specific platform. E.g. ",(0,l.jsx)(n.code,{children:"X86"})," CPU-architecture has its own ",(0,l.jsx)(n.code,{children:"Assembly"})," instruction sets as well as the ",(0,l.jsx)(n.code,{children:"arm"})," CPU."]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"Assembly"})," is CPU-dependent as machine code is CPU-dependent, while ",(0,l.jsx)(n.code,{children:"C"})," language is CPU-independent for cross-platform."]}),"\n",(0,l.jsxs)(n.p,{children:["Is the first version of ",(0,l.jsx)(n.code,{children:"GCC"})," written in ",(0,l.jsx)(n.code,{children:"Assembly"}),"?"]}),"\n",(0,l.jsxs)(n.p,{children:["No, ",(0,l.jsx)(n.code,{children:"C"})," started with the ",(0,l.jsx)(n.code,{children:"BCPL"})," language, ",(0,l.jsx)(n.a,{href:"https://stackoverflow.com/questions/18125490/how-was-the-first-c-compiler-written"})]}),"\n",(0,l.jsx)(n.h2,{id:"assembler",children:"Assembler"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["GNU assembler (GAS)","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["x86-64 GNU assembler","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"AT&T syntax"}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["aarch64 GNU assembler","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"aarch64/arm64 syntax"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["Clang Assembler","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["external Assembler","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"GNU Assembler"}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.li,{children:"LLVM\u2019s integrated assembler"}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"https://clang.llvm.org/docs/Toolchain.html#assembler",children:"https://clang.llvm.org/docs/Toolchain.html#assemble"})}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["Netwide assembler (NASM)","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Intel syntax"}),"\n",(0,l.jsxs)(n.li,{children:["x86-64","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"macOS"}),"\n",(0,l.jsx)(n.li,{children:"linux"}),"\n",(0,l.jsx)(n.li,{children:"windows"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["MASM","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Intel syntax"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.p,{children:["A example ",(0,l.jsx)(n.strong,{children:"NASM"})," assembly file ",(0,l.jsx)(n.code,{children:"print.asm"})," to print message"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-nasm",metastring:'title="print.asm"',children:'; print.asm\n; nasm -f elf64 print.asm && ld print.o && ./a.out ; echo $?\n; objdump -d a.out\nsection .data\nmessage db, "Welcome,   to, Segmentation, Faults!, "\n\nsection .text\n\nglobal _start\n\n_printMessage:\n    mov rax, 4       ; System call number for sys_write\n    mov rbx, 1       ; File descriptor 1 is stdout\n    mov rcx, message ; Pointer to the message string\n    mov rdx, 32      ; Length of the message\n    int 0x80         ; Call kernel\n\n    ret ; Return from the function\n\n_exit:\n    mov rax, 1 ; System call number for sys_exit\n    mov rbx, 0 ; Exit code 0\n    int 0x80   ; Call kernel\n\n_start:\n    call _printMessage ; Call the print message function\n    mov  rax, 1        ; System call number for sys_exit\n    mov  rbx, 1        ; Exit code 0\n    int  0x80          ; Call kernel\n'})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-nasm",metastring:'title="sum.asm"',children:"; sum.asm\n; nasm -f elf64 sum.asm && ld sum.o && ./a.out ; echo $?\n; objdump -d a.out\nsection .text\nglobal _start\n\n; Function to calculate the sum of two integers\nsum:\n    mov rax, rdi   ; Move the first argument (a) to rax\n    add rax, rsi   ; Add the second argument (b) to rax\n    ret            ; Return with the result in rax\n\n_start:\n    ; Example usage of the sum function\n    mov rdi, 5     ; First argument: a = 5\n    mov rsi, 7     ; Second argument: b = 7\n\n    call sum       ; Call the sum function\n\n    ; The result is now in rax\n    ; It can be used or printed, depending on the context\n    mov rdi, rax   ; Exit code 0\n\n    ; Exit the program\n    mov rax, 60    ; System call number for sys_exit\n    syscall        ; Make the system call\n"})}),"\n",(0,l.jsx)(n.h2,{id:"memory-layout",children:"Memory Layout"}),"\n",(0,l.jsx)(n.p,{children:"The structure of an assembly file generally consists of serval section:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:".text"})," section:","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:".text"})," section is generally read-only. It is typically used for storing executable code, and it is not intended to be modified during program execution."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:".text"})," section contains the machine code instructions that the processor will execute."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:".text"})," section contains global constant data."]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:".data"})," section:","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:".data"})," section is writable. It is used for storing initialized data that can be modified during the execution of the program."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:".data"})," section contains global variable data."]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:".bss"})," section:","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["It's mostly the same with ",(0,l.jsx)(n.code,{children:".data"})," section except it's used for storing uninitialized data"]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:".rodata"})," section:","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"It is used for read-only data, such as constant strings."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"Here's a simple example illustrating the use of these sections:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-nasm",children:'.section .text\n.global _start\n\n_start:\n    // Code goes here\n\n.section .data\nmy_data:\n    .word 42   // Initialized data\n\n.section .bss\nmy_uninitialized_data:\n    .skip 4    // Uninitialized data, occupies 4 bytes\n\n.section .rodata\nmy_string:\n    .asciz "Hello, World!"  // Read-only data\n'})}),"\n",(0,l.jsxs)(n.p,{children:["A compiled program's memory layout consists of these segments.\nA running program's memory layout consists of these segments, and also ",(0,l.jsx)(n.code,{children:"heap"})," and ",(0,l.jsx)(n.code,{children:"stack"})," memory."]}),"\n",(0,l.jsx)(n.h2,{id:"memory-layout-of-a-running-program",children:"Memory Layout of a Running Program"}),"\n",(0,l.jsx)(n.p,{children:"A running program typically consists of serval segments or sections, each serving a specific purpose but common sections include:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"Stack"}),":","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Stores local variables and function call information."}),"\n",(0,l.jsx)(n.li,{children:"Memory is automatically allocated and de-allocated as functions are called and return."}),"\n",(0,l.jsxs)(n.li,{children:["Register(",(0,l.jsx)(n.code,{children:"sp"})," in ",(0,l.jsx)(n.code,{children:"arm64"}),", stack pointer) is used to manage and point to the stack memory."]}),"\n",(0,l.jsxs)(n.li,{children:["Size is limited(may lead to ",(0,l.jsx)(n.strong,{children:"stack overflow"}),").","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["set via ",(0,l.jsx)(n.code,{children:"ulimit -s"})," in linux."]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"Heap"}),":","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Dynamic memory managed by programmer at runtime."}),"\n",(0,l.jsxs)(n.li,{children:["Memory is allocated and deallocated explicitly using functions like ",(0,l.jsx)(n.code,{children:"malloc"}),"/",(0,l.jsx)(n.code,{children:"free"})," in ",(0,l.jsx)(n.code,{children:"C"}),", and ",(0,l.jsx)(n.code,{children:"new"}),"/",(0,l.jsx)(n.code,{children:"delete"})," in ",(0,l.jsx)(n.code,{children:"C++"}),", ",(0,l.jsx)(n.code,{children:"brk"})," system call in ",(0,l.jsx)(n.code,{children:"assembly"})," etc."]}),"\n",(0,l.jsx)(n.li,{children:"Store dynamic data that can be shared across functions. Data lifecycle is not bound to functions."}),"\n",(0,l.jsx)(n.li,{children:"Size is much larger than the stack,"}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"Data"}),"(",(0,l.jsx)(n.code,{children:".data"}),", ",(0,l.jsx)(n.code,{children:".bss"}),"):","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Stores global variables/constants, separated into initialized and uninitialized"}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"Text"}),"(",(0,l.jsx)(n.code,{children:".text"}),"):","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Stores the code being executed"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"https://courses.engr.illinois.edu/cs225/fa2022/resources/stack-heap/",children:"CS 225 | Stack and Heap Memory"})}),"\n",(0,l.jsx)(n.h2,{id:"label",children:"Label"}),"\n",(0,l.jsx)(n.p,{children:"Label"}),"\n",(0,l.jsx)(n.h2,{id:"instruction",children:"Instruction"}),"\n",(0,l.jsx)(n.p,{children:"Assembly instructions are human readable representation of the machine code as CPU can only understand the machine code."}),"\n",(0,l.jsx)(n.p,{children:"Instruction: Opcode + Oprand"}),"\n",(0,l.jsx)(n.h3,{id:"opcode",children:"Opcode"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"http://sparksandflames.com/files/x86InstructionChart.html",children:"Intel x86 Assembler Instruction Set Opcode Table"})}),"\n",(0,l.jsx)(n.h3,{id:"oprand",children:"Oprand"}),"\n",(0,l.jsx)(n.p,{children:"Data area"}),"\n",(0,l.jsx)(n.h4,{id:"register-operand",children:"Register Operand"}),"\n",(0,l.jsx)(n.p,{children:"Register Operand"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-nasm",children:"mov   rdi, rsi\n"})}),"\n",(0,l.jsx)(n.h4,{id:"immediate-operand",children:"Immediate Operand"}),"\n",(0,l.jsx)(n.p,{children:"Immediate Operand"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-nasm",children:"mov   rdi, 0x21\nmov   rdi, 5\nmov   edi, 0x21314151\n"})}),"\n",(0,l.jsxs)(n.p,{children:["In ",(0,l.jsx)(n.code,{children:"aarch64"}),", the immediate value is subject to:"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["Arithmetic instructions (",(0,l.jsx)(n.code,{children:"add{s}"}),", ",(0,l.jsx)(n.code,{children:"sub{s}"}),", ",(0,l.jsx)(n.code,{children:"cmp"}),", ",(0,l.jsx)(n.code,{children:"cmn"}),") take a 12-bit unsigned immediate with an optional 12-bit left shift."]}),"\n",(0,l.jsxs)(n.li,{children:["Move instructions (",(0,l.jsx)(n.code,{children:"movz"}),", ",(0,l.jsx)(n.code,{children:"movn"}),", ",(0,l.jsx)(n.code,{children:"movk"}),") take a 16-bit immediate optionally shifted to any 16-bit-aligned position within the register."]}),"\n",(0,l.jsxs)(n.li,{children:["Address calculations (",(0,l.jsx)(n.code,{children:"adr"}),", ",(0,l.jsx)(n.code,{children:"adrp"}),") take a 21-bit signed immediate, although there's no actual syntax to specify it directly - to do so you'd have to resort to assembler expression trickery to generate an appropriate \"label\"."]}),"\n",(0,l.jsxs)(n.li,{children:["Logical instructions (",(0,l.jsx)(n.code,{children:"and{s}"}),", ",(0,l.jsx)(n.code,{children:"orr"}),", ",(0,l.jsx)(n.code,{children:"eor"}),", ",(0,l.jsx)(n.code,{children:"tst"}),') take a "bitmask immediate".']}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"memory-operand",children:"Memory Operand"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-nasm",children:"mov   rdi, [sdi]\n"})}),"\n",(0,l.jsx)(n.h3,{id:"instruction-encoding",children:"Instruction Encoding"}),"\n",(0,l.jsx)(n.p,{children:"Assembler will encode the human-readable instruction into machine code."}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["In ",(0,l.jsx)(n.code,{children:"aarch64"}),", the encoding instruction is ",(0,l.jsx)(n.strong,{children:"fixed-size"}),"(4 bytes) machine code."]}),"\n",(0,l.jsxs)(n.li,{children:["In ",(0,l.jsx)(n.code,{children:"x86_64"}),", the encoding instruction is ",(0,l.jsx)(n.strong,{children:"non-fixed-size"}),"(up to 16 bytes) machine code."]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"http://www.c-jump.com/CIS77/CPU/x86/lecture.html",children:"Encoding Real x86 Instructions"})}),"\n",(0,l.jsxs)(n.p,{children:["Let's have a glimpse on the impact of the ",(0,l.jsx)(n.strong,{children:"fixed/non-fixed"})," encoding."]}),"\n",(0,l.jsxs)(n.p,{children:["In order to load 32-bit integer, ",(0,l.jsx)(n.code,{children:"x86_64"})," need only ",(0,l.jsx)(n.strong,{children:"one"})," instruction while more instructions are needed for ",(0,l.jsx)(n.code,{children:"aarch64"})," to do that."]}),"\n",(0,l.jsxs)(n.p,{children:["Load a 32-bit integer ",(0,l.jsx)(n.code,{children:"0x1a2b3c4d"})," in ",(0,l.jsx)(n.code,{children:"x86_64"}),","]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-nasm",children:"mov     rid, 0x1a2b3c4d\n"})}),"\n",(0,l.jsxs)(n.p,{children:["Load a 32-bit integer 32-bit ",(0,l.jsx)(n.code,{children:"0x1a2b3c4d"})," in ",(0,l.jsx)(n.code,{children:"aarch64"}),"(the immediate value in ",(0,l.jsx)(n.code,{children:"mov"})," must be in the range of ",(0,l.jsx)(n.code,{children:"16-bit"}),", so it needs ",(0,l.jsx)(n.strong,{children:"two"})," instructions),"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-nasm",children:"movz    x1, 0x3c4d\nmovk    x1, 0x1a2b, lsl 16\n"})}),"\n",(0,l.jsx)(n.h2,{id:"nasm-x86_64-cheat-sheet",children:"NASM x86_64 cheat sheet"}),"\n",(0,l.jsx)(n.p,{children:"NASM x86_64 cheat sheet"}),"\n",(0,l.jsx)(n.h2,{id:"gas-aarch64-cheat-sheet",children:"GAS aarch64 cheat sheet"}),"\n",(0,l.jsx)(n.p,{children:"GAS aarch64 cheat sheet"}),"\n",(0,l.jsx)(n.h2,{id:"assemblys-role-in-compiler",children:"Assembly's Role in Compiler"}),"\n",(0,l.jsxs)(n.p,{children:["In the compiling process, a compiler such as ",(0,l.jsx)(n.strong,{children:"GCC"})," will translate ",(0,l.jsx)(n.code,{children:"C"})," code into ",(0,l.jsx)(n.code,{children:"Assembly"})," code for different CPU architectures, then use its corresponding ",(0,l.jsx)(n.strong,{children:"Assembler"})," to translate the ",(0,l.jsx)(n.code,{children:"Assembly"})," code to the machine code which is CPU dependent."]}),"\n",(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"Assembly"})," plays intermediate role in the compiler, while higher language like ",(0,l.jsx)(n.code,{children:"C"})," sits upfront and machine code runs at the bottom."]}),"\n",(0,l.jsx)(n.p,{children:"I have another writing to introduce my understanding of the compiler from the practice more than the theoretical point of view, and how to write a compiler."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"/docs/wiki/wiki-compiler",children:"wiki-compiler.mdx"})}),"\n",(0,l.jsx)(n.h2,{id:"resources",children:"Resources"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"https://gist.github.com/mikesmullin/6259449",children:"Notes on x86-64 Assembly and Machine Code \xb7 GitHub"})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"https://cs.lmu.edu/~ray/notes/nasmtasutorial/",children:"nasmtasutorial"})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"https://cs.brown.edu/courses/cs033/docs/guides/x64_cheatsheet.pdf",children:"x64_cheatsheet.pdf"})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"http://6.s081.scripts.mit.edu/sp18/x86-64-architecture-guide.html",children:"mit x86-64 architecture guide"})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"https://cs61.seas.harvard.edu/site/2018/Asm1/",children:"Assembly 1: Basics \u2013 CS 61 2018"})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"https://web.stanford.edu/class/cs107/guide/x86-64.html",children:"CS107 Guide to x86-64"})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"https://www.cs.virginia.edu/~evans/cs216/guides/x86.html",children:"Guide to x86 Assembly"})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"https://www.cs.uaf.edu/2016/fall/cs301/lecture/09_28_machinecode.html",children:"Assembly Language & Computer Architecture Lecture (CS301)"})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"https://p403n1x87.github.io/getting-started-with-x86-64-assembly-on-linux.html",children:"The Hub of Heliopolis - Getting Started with x86-64 Assembly on Linux"})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"https://flint.cs.yale.edu/cs421/papers/x86-asm/asm.html",children:"Guide to x86 Assembly"})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"https://nickdesaulniers.github.io/blog/2014/04/18/lets-write-some-x86-64/",children:"Let's Write Some X86-64"})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"https://pacman128.github.io/static/pcasm-book.pdf",children:"pcasm-book.pdf"})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"https://redirect.cs.umbc.edu/portal/help/nasm/sample_64.shtml",children:"Sample 64-bit nasm programs"})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(o,{...e})}):o(e)}}}]);