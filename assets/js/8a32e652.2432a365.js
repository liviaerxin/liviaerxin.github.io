"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5249],{28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>i});var o=t(96540);const s={},r=o.createContext(s);function a(e){const n=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),o.createElement(r.Provider,{value:n},e.children)}},47834:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>a,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"practice/python-benchmark","title":"Python Benchmark","description":"benchmark to test the performance of operations in Python","source":"@site/../../docs/practice/python-benchmark.md","sourceDirName":"practice","slug":"/practice/python-benchmark","permalink":"/docs/practice/python-benchmark","draft":false,"unlisted":false,"editUrl":"https://github.com/liviaerxin/liviaerxin.github.io/edit/main/_ssg/docusaurus/../../docs/practice/python-benchmark.md","tags":[{"inline":true,"label":"python","permalink":"/docs/tags/python"},{"inline":true,"label":"samba","permalink":"/docs/tags/samba"}],"version":"current","lastUpdatedBy":"liviaerxin","lastUpdatedAt":1751185884000,"frontMatter":{"authors":["frank"],"tags":["python","samba"],"description":"benchmark to test the performance of operations in Python","keywords":["performance measure"],"image":"https://i.imgur.com/mErPwqL.png","date":"2024-01-12T00:00:00.000Z","draft":false,"enableComments":true},"sidebar":"docs","previous":{"title":"OpenCV tips","permalink":"/docs/practice/opencv-tips"},"next":{"title":"Python C Library","permalink":"/docs/practice/python-c-library"}}');var s=t(74848),r=t(28453);const a={authors:["frank"],tags:["python","samba"],description:"benchmark to test the performance of operations in Python",keywords:["performance measure"],image:"https://i.imgur.com/mErPwqL.png",date:new Date("2024-01-12T00:00:00.000Z"),draft:!1,enableComments:!0},i="Python Benchmark",c={},l=[{value:"Measuring Lock Performance in Python on Linux",id:"measuring-lock-performance-in-python-on-linux",level:2}];function h(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"python-benchmark",children:"Python Benchmark"})}),"\n",(0,s.jsxs)(n.p,{children:["Using Python's ",(0,s.jsx)(n.code,{children:"timeit"})," module to measure the performance of operations in Python quickly."]}),"\n",(0,s.jsx)(n.h2,{id:"measuring-lock-performance-in-python-on-linux",children:"Measuring Lock Performance in Python on Linux"}),"\n",(0,s.jsxs)(n.p,{children:["Here\u2019s a quick look at the cost of acquiring and releasing an ",(0,s.jsx)(n.strong,{children:"uncontended"})," lock using Python\u2019s ",(0,s.jsx)(n.code,{children:"threading.Lock"})," on a Linux system:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:'$ ./python -m timeit \\\n  -s "from threading import Lock; l=Lock(); a=l.acquire; r=l.release" \\\n  "a(); r()"\n10000000 loops, best of 3: 0.127 usec per loop\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Now, let\u2019s compare that with the cost of calling a ",(0,s.jsx)(n.strong,{children:"dummy Python function"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:'$ ./python -m timeit -s "def a(): pass" "a(); a()"\n1000000 loops, best of 3: 0.221 usec per loop\n'})}),"\n",(0,s.jsxs)(n.p,{children:["And a trivial ",(0,s.jsx)(n.strong,{children:"C function"})," call (returning the ",(0,s.jsx)(n.code,{children:"False"})," singleton via ",(0,s.jsx)(n.code,{children:"bool()"}),"):"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:'$ ./python -m timeit -s "a=bool" "a(); a()"\n10000000 loops, best of 3: 0.164 usec per loop\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Interestingly, using a ",(0,s.jsx)(n.code,{children:"Lock"})," as a ",(0,s.jsx)(n.strong,{children:"context manager"})," is actually ",(0,s.jsx)(n.em,{children:"slower"}),", not faster, despite what you might expect:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:'$ ./python -m timeit -s "from threading import Lock; l=Lock()" \\\n  "with l: pass"\n1000000 loops, best of 3: 0.242 usec per loop\n'})}),"\n",(0,s.jsx)(n.p,{children:"So at least on Linux, there doesn't seem to be much low-hanging fruit left when it comes to optimizing lock performance."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Bonus:"})," As of recent Python versions, ",(0,s.jsx)(n.code,{children:"RLock"})," is now just as fast as ",(0,s.jsx)(n.code,{children:"Lock"})," in uncontended cases:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:'$ ./python -m timeit \\\n  -s "from threading import RLock; l=RLock(); a=l.acquire; r=l.release" \\\n  "a(); r()"\n10000000 loops, best of 3: 0.114 usec per loop\n'})})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}}}]);