"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[8590],{28453:(e,i,n)=>{n.d(i,{R:()=>t,x:()=>l});var r=n(96540);const s={},d=r.createContext(s);function t(e){const i=r.useContext(d);return r.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function l(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:t(e.components),r.createElement(d.Provider,{value:i},e.children)}},64557:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>t,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"wiki/wiki-graphic","title":"Graphics Stack: From Low-Level Graphics APIs to High-Level GUI Toolkits","description":"Understanding the Graphics Stack, From GUI Toolkits to GPU APIs","source":"@site/../../docs/wiki/wiki-graphic.md","sourceDirName":"wiki","slug":"/wiki/wiki-graphic","permalink":"/docs/wiki/wiki-graphic","draft":false,"unlisted":false,"editUrl":"https://github.com/liviaerxin/liviaerxin.github.io/edit/master/_ssg/docusaurus/../../docs/wiki/wiki-graphic.md","tags":[{"inline":true,"label":"wiki","permalink":"/docs/tags/wiki"},{"inline":true,"label":"video","permalink":"/docs/tags/video"}],"version":"current","lastUpdatedBy":"frank","lastUpdatedAt":1745107200000,"frontMatter":{"sidebar_label":"wiki graphic","description":"Understanding the Graphics Stack, From GUI Toolkits to GPU APIs","keywords":["wiki","video","streaming protocols","chunk"],"image":"https://i.imgur.com/mErPwqL.png","tags":["wiki","video"],"last_update":{"date":"2025-04-20T00:00:00.000Z","author":"frank"}},"sidebar":"docs","previous":{"title":"Diagram Wiki","permalink":"/docs/wiki/wiki-diagram"},"next":{"title":"Wiki Network","permalink":"/docs/wiki/wiki-network"}}');var s=n(74848),d=n(28453);const t={sidebar_label:"wiki graphic",description:"Understanding the Graphics Stack, From GUI Toolkits to GPU APIs",keywords:["wiki","video","streaming protocols","chunk"],image:"https://i.imgur.com/mErPwqL.png",tags:["wiki","video"],last_update:{date:new Date("2025-04-20T00:00:00.000Z"),author:"frank"}},l="Graphics Stack: From Low-Level Graphics APIs to High-Level GUI Toolkits",a={},c=[{value:"Low-Level Graphics APIs",id:"low-level-graphics-apis",level:2},{value:"Rendering Engine",id:"rendering-engine",level:2},{value:"GUI Framework Toolkits",id:"gui-framework-toolkits",level:2},{value:"Windowing Systems(OS Layers)",id:"windowing-systemsos-layers",level:2},{value:"Visualizing the Relationships",id:"visualizing-the-relationships",level:2},{value:"Bonus: Examples In Practice",id:"bonus-examples-in-practice",level:3},{value:"References",id:"references",level:2},{value:"Android graphics",id:"android-graphics",level:3},{value:"WayLand",id:"wayland",level:3}];function o(e){const i={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,d.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(i.header,{children:(0,s.jsx)(i.h1,{id:"graphics-stack-from-low-level-graphics-apis-to-high-level-gui-toolkits",children:"Graphics Stack: From Low-Level Graphics APIs to High-Level GUI Toolkits"})}),"\n",(0,s.jsx)(i.p,{children:"Modern GUI composition of:"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:["GPU","\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"Nvidia"}),"\n",(0,s.jsx)(i.li,{children:"AMD"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(i.li,{children:["Graphic APIs(communicate with the GPU)","\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"OpenGL"}),"\n",(0,s.jsx)(i.li,{children:"Vulkan"}),"\n",(0,s.jsx)(i.li,{children:"DirectX"}),"\n",(0,s.jsx)(i.li,{children:"Metal"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(i.li,{children:["Rendering Engine","\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:["GPU, Hardware Rendering","\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"Skia + OpenGL, Vulkan, DirectX, Metal"}),"\n",(0,s.jsx)(i.li,{children:"Qt + OpenGL, Vulkan, DirectX, Metal"}),"\n",(0,s.jsx)(i.li,{children:"Cairo + OpenGL"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(i.li,{children:["CPU, Software Rendering","\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"QT Rasterization Engine"}),"\n",(0,s.jsx)(i.li,{children:"Skia + CPU"}),"\n",(0,s.jsx)(i.li,{children:"Cairo + CPU"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(i.li,{children:["Windowing System/Compositor","\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"Quartz Compositor(OSX)"}),"\n",(0,s.jsx)(i.li,{children:"Desktop Window Manager(Windows)"}),"\n",(0,s.jsx)(i.li,{children:"X11(Linux)"}),"\n",(0,s.jsx)(i.li,{children:"Wayland(Linux)"}),"\n",(0,s.jsx)(i.li,{children:"SurfaceFlinger(Android)"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(i.h2,{id:"low-level-graphics-apis",children:"Low-Level Graphics APIs"}),"\n",(0,s.jsxs)(i.p,{children:["These are used to render 2D/3D graphics, directly interfacing with ",(0,s.jsx)(i.strong,{children:"GPU"}),"."]}),"\n",(0,s.jsxs)(i.table,{children:[(0,s.jsx)(i.thead,{children:(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.th,{children:"API"}),(0,s.jsx)(i.th,{children:"Platform Support"}),(0,s.jsx)(i.th,{children:"Description"})]})}),(0,s.jsxs)(i.tbody,{children:[(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:"OpenGL"}),(0,s.jsx)(i.td,{children:"Cross-platform (Windows, macOS, Linux)"}),(0,s.jsx)(i.td,{children:"Legacy but widely supported; immediate mode and programmable pipeline."})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:"Vulkan"}),(0,s.jsx)(i.td,{children:"Cross-platform (modern)"}),(0,s.jsx)(i.td,{children:"Low-level, high-performance successor to OpenGL. More control, more complexity."})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:"DirectX"}),(0,s.jsx)(i.td,{children:"Windows, Xbox"}),(0,s.jsx)(i.td,{children:"Microsoft's proprietary graphics API. Most used in Windows gaming/device."})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:"Metal"}),(0,s.jsx)(i.td,{children:"macOS and iOS"}),(0,s.jsx)(i.td,{children:"Apple\u2019s graphics API on Apple gaming/device."})]})]})]}),"\n",(0,s.jsx)(i.p,{children:"These APIs don't create windows or GUI elements \u2014 they render within a surface (window) provided by the OS or another toolkit."}),"\n",(0,s.jsx)(i.h2,{id:"rendering-engine",children:"Rendering Engine"}),"\n",(0,s.jsxs)(i.table,{children:[(0,s.jsx)(i.thead,{children:(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.th,{children:"Rendering Engine"}),(0,s.jsx)(i.th,{children:"Primary Use"}),(0,s.jsx)(i.th,{children:"Key Platform(s)"})]})}),(0,s.jsxs)(i.tbody,{children:[(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:"Cairo"}),(0,s.jsx)(i.td,{children:"2D graphics rendering (software)"}),(0,s.jsx)(i.td,{children:"GTK, GIMP, Pango"})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:"Skia"}),(0,s.jsx)(i.td,{children:"2D graphics rendering"}),(0,s.jsx)(i.td,{children:"Chrome, Android, Flutter"})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:"QT"}),(0,s.jsx)(i.td,{children:"2D graphics rendering"}),(0,s.jsx)(i.td,{children:"Chrome, Android, Flutter"})]})]})]}),"\n",(0,s.jsx)(i.h2,{id:"gui-framework-toolkits",children:"GUI Framework Toolkits"}),"\n",(0,s.jsx)(i.p,{children:"These provide buttons, windows, text inputs, etc. Some of them can also handle rendering."}),"\n",(0,s.jsxs)(i.table,{children:[(0,s.jsx)(i.thead,{children:(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.th,{children:"Toolkit"}),(0,s.jsx)(i.th,{children:"Uses Which Graphics API"}),(0,s.jsx)(i.th,{children:"Platform Support"}),(0,s.jsx)(i.th,{children:"Notes"})]})}),(0,s.jsxs)(i.tbody,{children:[(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:"Qt"}),(0,s.jsx)(i.td,{children:"OpenGL (and optionally Vulkan)"}),(0,s.jsx)(i.td,{children:"Cross-platform"}),(0,s.jsx)(i.td,{children:"Powerful C++ toolkit with widgets and OpenGL support. Can integrate with OpenGL directly."})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:"GTK"}),(0,s.jsx)(i.td,{children:"OpenGL via Cairo or GSK"}),(0,s.jsx)(i.td,{children:"Linux, Windows, macOS"}),(0,s.jsx)(i.td,{children:"Used in GNOME desktop. Not as OpenGL/Vulkan-native as Qt."})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:"Skia"}),(0,s.jsx)(i.td,{children:"Can use OpenGL, Vulkan, or CPU"}),(0,s.jsx)(i.td,{children:"Cross-platform"}),(0,s.jsx)(i.td,{children:"2D graphics library by Google (used in Chrome, Flutter). Not a GUI toolkit per se, but a rendering engine."})]})]})]}),"\n",(0,s.jsx)(i.h2,{id:"windowing-systemsos-layers",children:"Windowing Systems(OS Layers)"}),"\n",(0,s.jsx)(i.p,{children:"These provide surfaces or contexts for rendering, and handle input like mouse/keyboard."}),"\n",(0,s.jsxs)(i.table,{children:[(0,s.jsx)(i.thead,{children:(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.th,{children:"System"}),(0,s.jsx)(i.th,{children:"Platform"}),(0,s.jsx)(i.th,{children:"Relationship"})]})}),(0,s.jsxs)(i.tbody,{children:[(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:"X11"}),(0,s.jsx)(i.td,{children:"Linux/Unix"}),(0,s.jsx)(i.td,{children:"Legacy windowing system. You render OpenGL inside an X11 window."})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:"Wayland"}),(0,s.jsx)(i.td,{children:"Linux (modern)"}),(0,s.jsx)(i.td,{children:"Newer alternative to X11. More modern, secure."})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:"Apple Quartz / MetalKit / Cocoa"}),(0,s.jsx)(i.td,{children:"macOS"}),(0,s.jsx)(i.td,{children:"Apple dropped OpenGL support in favor of Metal. GUI apps are written with Cocoa (Objective-C/Swift), Metal handles rendering."})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:"Windows GDI / DWM"}),(0,s.jsx)(i.td,{children:"Windows"}),(0,s.jsx)(i.td,{children:"DirectX and GDI share surfaces; modern Windows apps often use DirectX for acceleration."})]})]})]}),"\n",(0,s.jsxs)(i.p,{children:["It's very essential to apply the ",(0,s.jsx)(i.code,{children:"native Windowing System"})," library for Cross-platform GUI framework in different platforms. Here's a cue from ",(0,s.jsx)(i.a,{href:"https://github.com/glfw/glfw/blob/3a60992a418aad88717db32353bec22e8bb7dab3/include/GLFW/glfw3native.h#L94-L118",children:"including native windowing system headers from GLFW"})]}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-c",children:"#if !defined(GLFW_NATIVE_INCLUDE_NONE)\n #if defined(GLFW_EXPOSE_NATIVE_WIN32) || defined(GLFW_EXPOSE_NATIVE_WGL)\n  /* This is a workaround for the fact that glfw3.h needs to export APIENTRY (for\n   * example to allow applications to correctly declare a GL_KHR_debug callback)\n   * but windows.h assumes no one will define APIENTRY before it does\n   */\n  #if defined(GLFW_APIENTRY_DEFINED)\n   #undef APIENTRY\n   #undef GLFW_APIENTRY_DEFINED\n  #endif\n  #include <windows.h>\n #elif defined(GLFW_EXPOSE_NATIVE_COCOA) || defined(GLFW_EXPOSE_NATIVE_NSGL)\n  #if defined(__OBJC__)\n   #import <Cocoa/Cocoa.h>\n  #else\n   #include <ApplicationServices/ApplicationServices.h>\n   #include <objc/objc.h>\n  #endif\n #elif defined(GLFW_EXPOSE_NATIVE_X11) || defined(GLFW_EXPOSE_NATIVE_GLX)\n  #include <X11/Xlib.h>\n  #include <X11/extensions/Xrandr.h>\n #elif defined(GLFW_EXPOSE_NATIVE_WAYLAND)\n  #include <wayland-client.h>\n #endif\n"})}),"\n",(0,s.jsx)(i.h2,{id:"visualizing-the-relationships",children:"Visualizing the Relationships"}),"\n",(0,s.jsx)(i.p,{children:"Here\u2019s how it all connects:"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-sh",children:"Your App (Qt / Skia)\n     \u2193\nGUI Toolkit (Qt / GTK / Skia)\n     \u2193\nWindow System (X11 / AppleKit / Win32)\n     \u2193\nGraphics API (OpenGL / Vulkan / DirectX)\n     \u2193\nGPU renders pixels to screen\n"})}),"\n",(0,s.jsx)(i.h3,{id:"bonus-examples-in-practice",children:"Bonus: Examples In Practice"}),"\n",(0,s.jsxs)(i.table,{children:[(0,s.jsx)(i.thead,{children:(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.th,{children:"Platform"}),(0,s.jsx)(i.th,{children:"Toolkit"}),(0,s.jsx)(i.th,{children:"Window System"}),(0,s.jsx)(i.th,{children:"Graphics API"})]})}),(0,s.jsxs)(i.tbody,{children:[(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:"Linux + KDE"}),(0,s.jsx)(i.td,{children:"Qt"}),(0,s.jsx)(i.td,{children:"X11 or Wayland"}),(0,s.jsx)(i.td,{children:"OpenGL/Vulkan"})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:"Windows Game"}),(0,s.jsx)(i.td,{children:"Custom / DirectX GUI"}),(0,s.jsx)(i.td,{children:"Win32"}),(0,s.jsx)(i.td,{children:"DirectX"})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:"macOS App"}),(0,s.jsx)(i.td,{children:"Cocoa (SwiftUI/UIKit)"}),(0,s.jsx)(i.td,{children:"Quartz"}),(0,s.jsx)(i.td,{children:"Metal"})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:"Cross-platform App"}),(0,s.jsx)(i.td,{children:"Qt + Skia"}),(0,s.jsx)(i.td,{children:"Platform-native"}),(0,s.jsx)(i.td,{children:"OpenGL/Vulkan/Metal"})]})]})]}),"\n",(0,s.jsx)(i.h2,{id:"references",children:"References"}),"\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.a,{href:"https://en.wikipedia.org/wiki/Windowing_system",children:"Windowing system - Wikipedia"})}),"\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.a,{href:"https://www.baeldung.com/linux/gui",children:"GUI Under Linux | Baeldung on Linux"})}),"\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.a,{href:"https://en.wikipedia.org/wiki/GTK",children:"GTK - Wikipedia"})}),"\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.a,{href:"https://alain.xyz/blog/comparison-of-modern-graphics-apis",children:"A Comparison of Modern Graphics APIs"})}),"\n",(0,s.jsx)(i.h3,{id:"android-graphics",children:"Android graphics"}),"\n",(0,s.jsx)(i.p,{children:"two core pieces:"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"SurfaceFlinger"}),"\n",(0,s.jsx)(i.li,{children:"Skia"}),"\n"]}),"\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.a,{href:"https://source.android.com/devices/graphics",children:"Graphics \xa0|\xa0 Android Open Source Project"}),"\n",(0,s.jsx)(i.a,{href:"https://stackoverflow.com/questions/4579573/android-graphics-internals",children:"Android Graphics Internals - Stack Overflow"})]}),"\n",(0,s.jsx)(i.h3,{id:"wayland",children:"WayLand"}),"\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.a,{href:"https://bugaevc.gitbooks.io/writing-wayland-clients/content/about-this-book/what-is-wayland.html",children:"What is Wayland? \xb7 Writing Wayland clients"})}),"\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.a,{href:"https://hdante.wordpress.com/2014/07/08/the-hello-wayland-tutorial/",children:"The Hello Wayland Tutorial | FLOSS & Cia"})}),"\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.a,{href:"https://medium.com/@bugaevc/how-to-use-wayland-with-c-to-make-a-linux-app-c2673a35ce05",children:"How to use Wayland with C to make a Linux app | by Sergey Bugaev | Medium"})})]})}function h(e={}){const{wrapper:i}={...(0,d.R)(),...e.components};return i?(0,s.jsx)(i,{...e,children:(0,s.jsx)(o,{...e})}):o(e)}}}]);