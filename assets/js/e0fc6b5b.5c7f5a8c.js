"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6324],{28453:(e,t,o)=>{o.d(t,{R:()=>n,x:()=>a});var r=o(96540);const i={},s=r.createContext(i);function n(e){const t=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:n(e.components),r.createElement(s.Provider,{value:t},e.children)}},44156:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>n,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"algorithms","title":"Algorithms","description":"algorithm","source":"@site/../../docs/algorithms.mdx","sourceDirName":".","slug":"/algorithms","permalink":"/docs/algorithms","draft":false,"unlisted":false,"editUrl":"https://github.com/liviaerxin/liviaerxin.github.io/edit/master/_ssg/docusaurus/../../docs/algorithms.mdx","tags":[{"inline":true,"label":"algorithm","permalink":"/docs/tags/algorithm"},{"inline":true,"label":"maths","permalink":"/docs/tags/maths"}],"version":"current","lastUpdatedBy":"liviaerxin","lastUpdatedAt":1745347141000,"frontMatter":{"authors":["frank"],"tags":["algorithm","maths"],"description":"algorithm","keywords":["algorithm"],"image":"https://i.imgur.com/mErPwqL.png","date":"2024-02-27T00:00:00.000Z","draft":false,"enableComments":true},"sidebar":"docs","previous":{"title":"Keyboard Shortcut Collection","permalink":"/docs/cheat-sheet/keyboard-shortcut-collection"},"next":{"title":"building etl in ml with Airflow","permalink":"/docs/building-etl-in-ml-with-airflow"}}');var i=o(74848),s=o(28453);const n={authors:["frank"],tags:["algorithm","maths"],description:"algorithm",keywords:["algorithm"],image:"https://i.imgur.com/mErPwqL.png",date:new Date("2024-02-27T00:00:00.000Z"),draft:!1,enableComments:!0},a="Algorithms",l={},c=[{value:"Boyer\u2013Moore majority vote algorithm",id:"boyermoore-majority-vote-algorithm",level:2},{value:"Resources",id:"resources",level:2}];function m(e){const t={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"algorithms",children:"Algorithms"})}),"\n",(0,i.jsxs)(t.p,{children:["As it is known that algorithms and data structures are the prime of computer programming. With algorithms and data structures, the better high-level features in applications we can develop and implement. Outstanding algorithms means faster time and less space. ",(0,i.jsx)(t.code,{children:"O(1)"})," on both of time complexity and space must be the best as taking the constant time and the constant space, but it's rarely to achieve in practice. Next, ",(0,i.jsx)(t.code,{children:"O(log n)"})," is mostly desirable for most applications on real occasion."]}),"\n",(0,i.jsx)(t.p,{children:"Of course, you'll go through algorithms questions in a lot of interviews for programming-related positions."}),"\n",(0,i.jsx)(t.p,{children:"Here are proofs for the correctness of some common algorithms, that I'd like to understand and prove them in mathematics."}),"\n",(0,i.jsx)(t.h2,{id:"boyermoore-majority-vote-algorithm",children:"Boyer\u2013Moore majority vote algorithm"}),"\n",(0,i.jsx)(t.p,{children:"Just run one loop to find the majority in an array."}),"\n",(0,i.jsxs)(t.p,{children:["Time complexity: ",(0,i.jsx)(t.code,{children:"O(n)"}),"\nSpace complexity: ",(0,i.jsx)(t.code,{children:"O(1)"})]}),"\n",(0,i.jsx)(t.h2,{id:"resources",children:"Resources"})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(m,{...e})}):m(e)}}}]);