"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[3505],{7284:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>m,frontMatter:()=>o,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"system-design/designing-tiktok-comment-threads","title":"Designing Comment Threads for TikTok-Style Applications","description":"Designing Comment Threads for TikTok-Style Applications","source":"@site/../../docs/system-design/designing-tiktok-comment-threads.mdx","sourceDirName":"system-design","slug":"/system-design/designing-tiktok-comment-threads","permalink":"/docs/system-design/designing-tiktok-comment-threads","draft":false,"unlisted":false,"editUrl":"https://github.com/liviaerxin/liviaerxin.github.io/edit/main/_ssg/docusaurus/../../docs/system-design/designing-tiktok-comment-threads.mdx","tags":[{"inline":true,"label":"system-design","permalink":"/docs/tags/system-design"},{"inline":true,"label":"database","permalink":"/docs/tags/database"}],"version":"current","lastUpdatedBy":"frank","lastUpdatedAt":1742342400000,"frontMatter":{"sidebar_label":"designing-tiktok-comment-threads","description":"Designing Comment Threads for TikTok-Style Applications","keywords":["system-design","data-structure","tiktok","comment-threads"],"image":"https://i.imgur.com/mErPwqL.png","tags":["system-design","database"],"last_update":{"date":"2025-03-19T00:00:00.000Z","author":"frank"}},"sidebar":"docs","previous":{"title":"building realtime video processing applications","permalink":"/docs/system-design/building-realtime-video-processing-applications"},"next":{"title":"Cheat Sheet","permalink":"/docs/category/cheat-sheet"}}');var i=t(74848),r=t(28453);const o={sidebar_label:"designing-tiktok-comment-threads",description:"Designing Comment Threads for TikTok-Style Applications",keywords:["system-design","data-structure","tiktok","comment-threads"],image:"https://i.imgur.com/mErPwqL.png",tags:["system-design","database"],last_update:{date:new Date("2025-03-19T00:00:00.000Z"),author:"frank"}},a="Designing Comment Threads for TikTok-Style Applications",d={},l=[{value:"Comment Thread Structure",id:"comment-thread-structure",level:2},{value:"Data Model (Relational Database)",id:"data-model-relational-database",level:3},{value:"Reconstructing Comment Threads",id:"reconstructing-comment-threads",level:2},{value:"1. Fetch Top-Level Comments",id:"1-fetch-top-level-comments",level:3},{value:"2. Fetch Replies for Those Comments",id:"2-fetch-replies-for-those-comments",level:3},{value:"3. Group Replies by Parent (In Memory)",id:"3-group-replies-by-parent-in-memory",level:3},{value:"Scaling Considerations",id:"scaling-considerations",level:2},{value:"\ud83d\udd25 Bonus: Redis Caching for Hot Threads",id:"-bonus-redis-caching-for-hot-threads",level:2},{value:"Example Structure",id:"example-structure",level:3},{value:"Redis Key",id:"redis-key",level:3},{value:"Recompute and Cache",id:"recompute-and-cache",level:3},{value:"Conclusion",id:"conclusion",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"designing-comment-threads-for-tiktok-style-applications",children:"Designing Comment Threads for TikTok-Style Applications"})}),"\n",(0,i.jsx)(n.p,{children:"In modern content platforms like TikTok, the comment thread is an essential interaction space. Users can post top-level comments and reply to others, forming shallow trees. While this might seem simple, designing this system to be efficient, scalable, and user-friendly takes some thoughtful architecture."}),"\n",(0,i.jsx)(n.p,{children:"This post explores how comment threads are modeled, stored, and reconstructed \u2014 and then closes with a bonus section on using Redis for performance."}),"\n",(0,i.jsx)(n.h2,{id:"comment-thread-structure",children:"Comment Thread Structure"}),"\n",(0,i.jsx)(n.p,{children:"Each video can have:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Many ",(0,i.jsx)(n.strong,{children:"top-level comments"})]}),"\n",(0,i.jsxs)(n.li,{children:["Optional ",(0,i.jsx)(n.strong,{children:"replies"}),", each pointing to a ",(0,i.jsx)(n.code,{children:"parent_comment_id"})]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"data-model-relational-database",children:"Data Model (Relational Database)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"CREATE TABLE comments (\n  id BIGINT PRIMARY KEY,\n  video_id BIGINT NOT NULL,\n  user_id BIGINT NOT NULL,\n  parent_comment_id BIGINT NULL,\n  content TEXT NOT NULL,\n  replies_n BIGINT NOT NULL DEFAULT 0,\n  created_at TIMESTAMP NOT NULL DEFAULT NOW(),\n);\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"reconstructing-comment-threads",children:"Reconstructing Comment Threads"}),"\n",(0,i.jsx)(n.p,{children:"To render a full comment thread:"}),"\n",(0,i.jsx)(n.h3,{id:"1-fetch-top-level-comments",children:"1. Fetch Top-Level Comments"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"SELECT * FROM comments\nWHERE video_id = :video_id AND parent_comment_id IS NULL\nORDER BY replies_n DESC\nLIMIT 50;\n"})}),"\n",(0,i.jsx)(n.h3,{id:"2-fetch-replies-for-those-comments",children:"2. Fetch Replies for Those Comments"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"SELECT * FROM comments\nWHERE parent_comment_id IN (:top_level_comment_ids);\n"})}),"\n",(0,i.jsx)(n.h3,{id:"3-group-replies-by-parent-in-memory",children:"3. Group Replies by Parent (In Memory)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'from collections import defaultdict\n\nreplies_by_parent = defaultdict(list)\nfor reply in replies:\n    replies_by_parent[reply["parent_comment_id"]].append(reply)\n\nthread = []\nfor comment in top_comments:\n    comment["replies"] = replies_by_parent.get(comment["id"], [])\n    thread.append(comment)\n'})}),"\n",(0,i.jsxs)(n.p,{children:["This reconstruction approach is efficient: ",(0,i.jsx)(n.strong,{children:"O(N + M)"})," time, where N = number of top-level comments, M = total replies."]}),"\n",(0,i.jsx)(n.h2,{id:"scaling-considerations",children:"Scaling Considerations"}),"\n",(0,i.jsx)(n.p,{children:"To handle millions of comments:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Paginate top-level comments (and load replies lazily)"}),"\n",(0,i.jsxs)(n.li,{children:["Use indexes on ",(0,i.jsx)(n.code,{children:"video_id"}),", ",(0,i.jsx)(n.code,{children:"parent_comment_id"})]}),"\n",(0,i.jsx)(n.li,{children:"Consider denormalizing data for hot content"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"-bonus-redis-caching-for-hot-threads",children:"\ud83d\udd25 Bonus: Redis Caching for Hot Threads"}),"\n",(0,i.jsx)(n.p,{children:"To offload frequent reads and keep response times sub-ms, cache the full reconstructed thread in Redis."}),"\n",(0,i.jsx)(n.h3,{id:"example-structure",children:"Example Structure"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "video_id": 123,\n  "comments": [\n    {\n      "id": 1,\n      "content": "Nice vid!",\n      "replies": [\n        { "id": 4, "content": "Agree!" },\n        { "id": 5, "content": "Same!" }\n      ]\n    }\n  ]\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"redis-key",children:"Redis Key"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"comment_thread:video:123\n"})}),"\n",(0,i.jsx)(n.h3,{id:"recompute-and-cache",children:"Recompute and Cache"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'def recompute_comment_thread(video_id):\n    top_comments = db.query(...)\n    replies = db.query(...)\n    ...\n    redis.set(f"comment_thread:video:{video_id}", json.dumps(thread), ex=600)\n'})}),"\n",(0,i.jsx)(n.p,{children:"You can trigger recompute on new comment events or via background jobs."}),"\n",(0,i.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,i.jsx)(n.p,{children:"Designing comment threads involves balancing simplicity, flexibility, and performance. Whether you're serving 100 users or 100 million, the pattern of parent-child comment structuring and smart reconstruction gives you a strong foundation."}),"\n",(0,i.jsx)(n.p,{children:"And when performance matters most? Add a Redis layer to make it fly."})]})}function m(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var s=t(96540);const i={},r=s.createContext(i);function o(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);