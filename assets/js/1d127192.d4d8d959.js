"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5280],{82225:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>i,metadata:()=>o,toc:()=>l});var t=s(74848),r=s(28453);const i={authors:["frank"],tags:["network","cheat sheet"],description:"Network Cheat Sheet",keywords:["Network Cheat Sheet"],image:"https://i.imgur.com/mErPwqL.png",date:new Date("2024-01-16T00:00:00.000Z"),draft:!1,enableComments:!0},a="Network Cheat Sheet",o={id:"cheatsheet-network",title:"Network Cheat Sheet",description:"Network Cheat Sheet",source:"@site/../../docs/cheatsheet-network.mdx",sourceDirName:".",slug:"/cheatsheet-network",permalink:"/docs/cheatsheet-network",draft:!1,unlisted:!1,editUrl:"https://github.com/liviaerxin/liviaerxin.github.io/edit/master/_ssg/docusaurus/../../docs/cheatsheet-network.mdx",tags:[{inline:!0,label:"network",permalink:"/docs/tags/network"},{inline:!0,label:"cheat sheet",permalink:"/docs/tags/cheat-sheet"}],version:"current",lastUpdatedBy:"liviaerxin",lastUpdatedAt:1744924444e3,frontMatter:{authors:["frank"],tags:["network","cheat sheet"],description:"Network Cheat Sheet",keywords:["Network Cheat Sheet"],image:"https://i.imgur.com/mErPwqL.png",date:"2024-01-16T00:00:00.000Z",draft:!1,enableComments:!0},sidebar:"docs",previous:{title:"Cheatsheet ImageMagick",permalink:"/docs/cheatsheet-imagemagick"},next:{title:"Python pip cheat sheet",permalink:"/docs/cheatsheet-python-pip"}},c={},l=[{value:"Get IP address",id:"get-ip-address",level:2},{value:"Get IP address of a specific network interface",id:"get-ip-address-of-a-specific-network-interface",level:3},{value:"Show Routing Table",id:"show-routing-table",level:2},{value:"Find Gateway Used for Routing",id:"find-gateway-used-for-routing",level:2},{value:"Show Routes across Network",id:"show-routes-across-network",level:2},{value:"Ping Through Specific Interface",id:"ping-through-specific-interface",level:2},{value:"Find Out Address Used by Which Process",id:"find-out-address-used-by-which-process",level:2},{value:"Add a Route",id:"add-a-route",level:2},{value:"FireWall Rule",id:"firewall-rule",level:2},{value:"Get Geolocation of IP Address",id:"get-geolocation-of-ip-address",level:2},{value:"Packet Analyzer",id:"packet-analyzer",level:2},{value:"Monitor TCP packet on network interfaces",id:"monitor-tcp-packet-on-network-interfaces",level:3},{value:"Monitor HTTP message on network interfaces",id:"monitor-http-message-on-network-interfaces",level:3},{value:"USB Virtual Ethernet",id:"usb-virtual-ethernet",level:2},{value:"Access WSL 2 from local area network(LAN)",id:"access-wsl-2-from-local-area-networklan",level:2},{value:"Find WSL 2 IP address that can be reached from Windows host",id:"find-wsl-2-ip-address-that-can-be-reached-from-windows-host",level:3},{value:"Add proxy",id:"add-proxy",level:3},{value:"[Optional] Add firewall rule",id:"optional-add-firewall-rule",level:3},{value:"Check current proxy",id:"check-current-proxy",level:3},{value:"Clean up",id:"clean-up",level:3},{value:"Configure Static IP Address",id:"configure-static-ip-address",level:2}];function d(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"network-cheat-sheet",children:"Network Cheat Sheet"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"https://www.baeldung.com/cs/routing-table-entry",children:"Understanding Routing Table Entry | Baeldung on Computer Science"})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"the packs go through the gateway of interface. the same interface can have multiple gateways and different interfaces can have the same gateway."}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"https://forums.developer.nvidia.com/t/ssh-enabled-only-if-connected-through-microusb/192708/12",children:"route diagnosis"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"https://www.tecmint.com/find-out-which-process-listening-on-a-particular-port/",children:"3 Ways to Find Which Linux Process Listening on a Port"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"https://docs.oracle.com/cd/E18752_01/html/816-4554/ipconfig-142.html",children:"Monitoring Network Status With the netstat Command - System Administration Guide: IP Services"})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"System Administration Guide"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"https://www.xmodulo.com/geographic-location-ip-address-command-line.html",children:"How to look up the geographic location of an IP address from the command line"})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"#geolocation-of-ip"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"https://danielmiessler.com/study/tcpdump/",children:"A tcpdump Tutorial with Examples \u2014 50 Ways to Isolate Traffic - Daniel Miesslersearchmailmailmail"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"https://resource.nvidia.com/cheatsheets/linux-networking-cheatsheet-tcpdump",children:"TCPDump cheatsheet"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"https://opensource.com/article/18/10/introduction-tcpdump",children:"An introduction to using tcpdump at the Linux command line | Opensource.com"})}),"\n",(0,t.jsxs)(n.p,{children:["Knowing ",(0,t.jsx)(n.code,{children:"simultaneously"})," these three things for failing and working circumstances would be quite useful."]}),"\n",(0,t.jsx)(n.h2,{id:"get-ip-address",children:"Get IP address"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Linux"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sh",children:"rms@rms:~$ ip addr\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Windows"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-powershell",children:"PS C:\\Users\\Frank> ipconfig\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-powershell",children:"PS C:\\Users\\Frank> netsh interface ip show address\n"})}),"\n",(0,t.jsx)(n.h3,{id:"get-ip-address-of-a-specific-network-interface",children:"Get IP address of a specific network interface"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Linux"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sh",children:"rms@rms:~$ ip addr show enp0s31f6\n5: enp0s31f6: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc fq_codel state UP group default qlen 1000\n    link/ether 00:4e:01:fc:39:50 brd ff:ff:ff:ff:ff:ff\n    inet 10.6.64.184/24 brd 10.6.64.255 scope global enp0s31f6\n       valid_lft forever preferred_lft forever\n    inet6 fe80::24e:1ff:fefc:3950/64 scope link\n       valid_lft forever preferred_lft forever\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sh",children:"rms@rms:~$ hostname -I | awk '{print $1}'\n10.6.64.184\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Windows"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-powershell",children:'PS C:\\Users\\Frank> netsh interface ip show address "Ethernet"\n\nConfiguration for interface "Ethernet"\n    DHCP enabled:                         Yes\n    IP Address:                           10.6.64.243\n    Subnet Prefix:                        10.6.64.0/24 (mask 255.255.255.0)\n    Default Gateway:                      10.6.64.1\n    Gateway Metric:                       0\n    InterfaceMetric:                      25\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-powershell",children:'PS C:\\Users\\Frank> netsh interface ip show address "Ethernet" | findstr "IP Address"\n'})}),"\n",(0,t.jsx)(n.h2,{id:"show-routing-table",children:"Show Routing Table"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sh",children:"# linux\nroute\n# osx\nnetstat -rn\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"-r"})," flag means to show routes."]}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"-n"})," flag means to not resolve IPs to hostnames."]}),"\n",(0,t.jsx)(n.h2,{id:"find-gateway-used-for-routing",children:"Find Gateway Used for Routing"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sh",children:"# linux\nip route get 8.8.8.8\n# osx\nroute get 8.8.8.8\n"})}),"\n",(0,t.jsx)(n.h2,{id:"show-routes-across-network",children:"Show Routes across Network"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sh",children:"traceroute\n# en0 interface\ntraceroute -i en0\n"})}),"\n",(0,t.jsx)(n.h2,{id:"ping-through-specific-interface",children:"Ping Through Specific Interface"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sh",children:"# linux\nping -I en0 sslvpn.astri.org\n# osx\nping -b en0 sslvpn.astri.org\n"})}),"\n",(0,t.jsx)(n.h2,{id:"find-out-address-used-by-which-process",children:"Find Out Address Used by Which Process"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sh",children:"# osx\nnetstat -avn -p tcp\n"})}),"\n",(0,t.jsx)(n.h2,{id:"add-a-route",children:"Add a Route"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sh",children:"# osx\nroute -n add 10.0.0.0/24 10.0.0.1\n# linux\nroute -n add -net 10.0.0.0/24 gw 10.0.0.1\n"})}),"\n",(0,t.jsx)(n.h2,{id:"firewall-rule",children:"FireWall Rule"}),"\n",(0,t.jsx)(n.p,{children:"osx:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sh",children:"# show all information/stats\nsudo pfctl -sa\n# show rules\nsudo pfctl -sr\n# sanity check edited configuration file\nsudo pfctl -v -n -f /etc/pf.conf\n# load pf with new rules\nsudo pfctl -f /etc/pf.conf\n# enable pf\nsudo pfctl -e\n# disable pf\nsudo pfctl -d\n# add information on the fly\nsudo pfctl -t localsub -T add 127.0.0.0/24\n# flush added rules later\nsudo pfctl -Fa -f /etc/pf.conf\n\nsudo pfctl -si\nsudo pfctl -q\n"})}),"\n",(0,t.jsx)(n.h2,{id:"get-geolocation-of-ip-address",children:"Get Geolocation of IP Address"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sh",children:"curl ipinfo.io/103.216.223.161\n"})}),"\n",(0,t.jsx)(n.h2,{id:"packet-analyzer",children:"Packet Analyzer"}),"\n",(0,t.jsx)(n.h3,{id:"monitor-tcp-packet-on-network-interfaces",children:"Monitor TCP packet on network interfaces"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sh",children:"# list which interfaces are available for capture\ntcpdump --list-interfaces\n# capture all packets in any interface\nsudo tcpdump --interface any\n# limit the number of packets captured then stop `-c number`\nsudo tcpdump -i any -c 5\n# disable name resolution with using `-n` and port resolution with `-nn` \nsudo tcpdump -i any -c 5 -nn\n# filter packets by protocol, only capture `ICMP` packets\nsudo tcpdump -i any -c 5 icmp\n# capture packets related with host `8.8.8.8`\nsudo tcpdump -i any -c 5 -nn host 8.8.8.8\n# capture packets related with port `80`\nsudo tcpdump -i any -c 5 -nn port 80\n# capture packets with source address 192.168.0.1\nsudo tcpdump -i any -c 5 -nn src 192.168.0.1\n# capture packets with destination address 8.8.8.8\nsudo tcpdump -i any -c 5 -nn dst 8.8.8.8\n# capture either port `80` or port `443`\nsudo tcpdump -i enp0s31f6 -nn port 80 or port 443\n# display payload\nsudo tcpdump -i enp0s31f6 port 80 -A -s 0\n"})}),"\n",(0,t.jsx)(n.p,{children:"In the above command:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"-i"})," specifies the network interface, and ",(0,t.jsx)(n.code,{children:"any"})," means all interfaces."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"-c"})," specify the number of packets to capture, omitting ",(0,t.jsx)(n.code,{children:"-c"})," to capture packets continuously."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"-nn"})," display IP address and port as numbers rather than attempting to resolve them to hostname."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"-A"})," display the packet payload in ASCII format."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"-s 0"})," means capturing the entire packet."]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"monitor-http-message-on-network-interfaces",children:"Monitor HTTP message on network interfaces"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sh",metastring:'title="tcpflow"',children:"# monitor on the interface: `enp0s31f6`\nsudo tcpflow -p -c -i enp0s31f6 port 80\n# just show HTTP message of `GET` and `POST` HTTP methods\nsudo tcpflow -p -c -i enp0s31f6 port 80 | grep -oE '(GET|POST) .* HTTP/1.[01]|Host: .*'\n"})}),"\n",(0,t.jsx)(n.p,{children:"In the above command:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"-p"})," disables promiscuous mode"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"-c"})," means only print the output to the console and don\u2019t create files"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"-i"})," specifies the network interface"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"grep"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"-o"})," means show only the matching parts of the lines that match the pattern"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"-E"})," means the pattern is an extended regular expression (ERE)"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"usb-virtual-ethernet",children:"USB Virtual Ethernet"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"https://forums.developer.nvidia.com/t/provide-internet-through-micro-usb-while-doing-ssh/111326/14",children:"An explanation on the USB virtual ethernet"})}),"\n",(0,t.jsx)(n.h2,{id:"access-wsl-2-from-local-area-networklan",children:"Access WSL 2 from local area network(LAN)"}),"\n",(0,t.jsxs)(n.p,{children:["After enabling ",(0,t.jsx)(n.a,{href:"https://devblogs.microsoft.com/commandline/systemd-support-is-now-available-in-wsl/",children:"systemd"})," in WSL 2, I have to forward the Windows host port to the WSL 2 distribution."]}),"\n",(0,t.jsx)(n.h3,{id:"find-wsl-2-ip-address-that-can-be-reached-from-windows-host",children:"Find WSL 2 IP address that can be reached from Windows host"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sh",children:"$ ip addr show eth0\n2: eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1420 qdisc mq state UP group default qlen 1000\n    link/ether 00:15:5d:98:b5:99 brd ff:ff:ff:ff:ff:ff\n    inet 172.29.6.23/20 brd 172.29.15.255 scope global eth0\n       valid_lft forever preferred_lft forever\n    inet6 fe80::215:5dff:fe98:b599/64 scope link\n       valid_lft forever preferred_lft forever\n"})}),"\n",(0,t.jsx)(n.h3,{id:"add-proxy",children:"Add proxy"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-powershell",children:"netsh interface portproxy add v4tov4 listenport=8082 connectport=8082 connectaddress=172.29.6.23,127.0.0.1\n"})}),"\n",(0,t.jsx)(n.h3,{id:"optional-add-firewall-rule",children:"[Optional] Add firewall rule"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-powershell",children:'netsh advfirewall firewall add rule name= "Open Port 8082" dir=in action=allow protocol=TCP localport=8082\n'})}),"\n",(0,t.jsx)(n.h3,{id:"check-current-proxy",children:"Check current proxy"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-powershell",children:"netsh interface portproxy show all\n"})}),"\n",(0,t.jsx)(n.h3,{id:"clean-up",children:"Clean up"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-powershell",children:"netsh interface portproxy delete v4tov4 listenport=8082\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-powershell",children:'netsh advfirewall firewall delete rule name="Open port 8082"\n'})}),"\n",(0,t.jsx)(n.h2,{id:"configure-static-ip-address",children:"Configure Static IP Address"}),"\n",(0,t.jsxs)(n.p,{children:["Ubuntu 17.10 and later uses ",(0,t.jsx)(n.strong,{children:"Netplan"})," as the default network management tool. The previous Ubuntu versions were using ",(0,t.jsx)(n.strong,{children:"ifconfig"})," and its configuration file ",(0,t.jsx)(n.code,{children:"/etc/network/interfaces"})," to configure the network."]}),"\n",(0,t.jsxs)(n.p,{children:["Edit or create a file under ",(0,t.jsx)(n.code,{children:"/etc/netplan"}),", such as ",(0,t.jsx)(n.code,{children:"/etc/netplan/01-netcfg.yaml"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",metastring:'title="/etc/netplan/01-netcfg.yaml"',children:"network:\n version: 2\n renderer: networkd\n ethernets:\n   enp0s31f6:\n     dhcp4: no\n     addresses: [10.6.64.12/24]\n     gateway4: 10.6.64.1\n     nameservers:\n         addresses: [8.8.8.8,8.8.8.4]\n"})}),"\n",(0,t.jsx)(n.p,{children:"Options:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"enp0s31f6"}),": configure the network interface ",(0,t.jsx)(n.code,{children:"enp0s31f6"})," of the device type ",(0,t.jsx)(n.code,{children:"ethernets"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"dhcp4: no"}),": don't obtain IP address from the ",(0,t.jsx)(n.strong,{children:"DHCP"})," server."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"addresses: [10.6.64.12/24]"}),": use static IP address ",(0,t.jsx)(n.code,{children:"10.6.64.12"})," in subnet ",(0,t.jsx)(n.code,{children:"10.6.64.0/24"}),"."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Once done, save the file and apply the changes by running the following command:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-console",children:"$ sudo netplan apply\n"})}),"\n",(0,t.jsx)(n.p,{children:"Verify the changes by typing:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-console",children:"$ ip addr show enp0s31f6\n"})}),"\n",(0,t.jsxs)(n.admonition,{type:"note",children:[(0,t.jsxs)(n.p,{children:["For Ubuntu server which is provisioned with ",(0,t.jsx)(n.code,{children:"cloud-init"}),", you may need to disable it. To do so, create the following file: ",(0,t.jsx)(n.code,{children:"/etc/cloud/cloud.cfg.d/99-disable-network-config.cfg"})," as,"]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cfg",metastring:'title="/etc/cloud/cloud.cfg.d/99-disable-network-config.cfg',children:"network: {config: disabled}\n"})})]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>o});var t=s(96540);const r={},i=t.createContext(r);function a(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);