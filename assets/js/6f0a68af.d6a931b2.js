"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5321],{25889:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>l});var i=t(79297),s=t(74848),c=t(28453);const a={authors:["frank"],tags:["how-to","unicode"],description:"Playing with Unicode in deep",keywords:["how-to","UTF8","encode"],image:"https://i.imgur.com/mErPwqL.png",date:new Date("2023-12-08T00:00:00.000Z"),draft:!1,enableComments:!0},o="Playing with unicode in deep",r={authorsImageUrls:[void 0]},l=[{value:"FAQ",id:"faq",level:2},{value:"How a character is displayed on the screen?",id:"how-a-character-is-displayed-on-the-screen",level:3},{value:"How to find out whether the file uses UTF-8 or ASCII or other encoding schemas?",id:"how-to-find-out-whether-the-file-uses-utf-8-or-ascii-or-other-encoding-schemas",level:3},{value:"Can I set UTF-16 as locale in Linux?",id:"can-i-set-utf-16-as-locale-in-linux",level:3},{value:"What happens when printing a UTF-16 file in Linux?",id:"what-happens-when-printing-a-utf-16-file-in-linux",level:3},{value:"How can I check a UTF-8 file has a <code>BOM</code>?",id:"how-can-i-check-a-utf-8-file-has-a-bom",level:3},{value:"Why we can copy and paste the unicode characters into a shell?",id:"why-we-can-copy-and-paste-the-unicode-characters-into-a-shell",level:3},{value:"How a string is stored in memory when Python running?",id:"how-a-string-is-stored-in-memory-when-python-running",level:3},{value:"Unicode in JSON",id:"unicode-in-json",level:2},{value:"Base64",id:"base64",level:2},{value:"Python",id:"python",level:2},{value:"C application",id:"c-application",level:2},{value:"References",id:"references",level:2}];function d(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,c.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"The smallest unit of all texts we see on the screen is one character. But you may wonder about:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"How one character is displayed on the screen?"}),"\n",(0,s.jsx)(n.li,{children:"How one character is kept in memory or disk in binary format(0 or 1)?"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Let's dive into the ",(0,s.jsx)(n.strong,{children:"Unicode"})," to solve these questions."]}),"\n",(0,s.jsxs)(n.p,{children:["In Unicode, a character maps to something called code point which is a magic number written as hex like: ",(0,s.jsx)(n.code,{children:"U+20AC"})," and is still just a abstract layer."]}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Layer"}),(0,s.jsx)(n.th,{children:"Representation"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"screen"}),(0,s.jsx)(n.td,{children:"glyph"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"abstraction"}),(0,s.jsx)(n.td,{children:"unicode character"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"abstraction"}),(0,s.jsx)(n.td,{children:"unicode code point"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"disk"}),(0,s.jsx)(n.td,{children:"variable-length bytes(1 to 4 bytes)"})]})]})]}),"\n",(0,s.jsx)(n.p,{children:"How that code point is represented in memory or on disk?"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"UTF-8"}),", ",(0,s.jsx)(n.code,{children:"UTF-16"}),", and ",(0,s.jsx)(n.code,{children:"UTF-32"})," help translate unicode code point into binary data in 8-bit bytes which can be saved in disk or be transported in network."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"UTF-8"})," is character-to-bytes(1 to 4 bytes) encoding standard across almost all system and application."]}),"\n",(0,s.jsx)(n.h2,{id:"faq",children:"FAQ"}),"\n",(0,s.jsx)(n.h3,{id:"how-a-character-is-displayed-on-the-screen",children:"How a character is displayed on the screen?"}),"\n",(0,s.jsx)(n.p,{children:"software maps each character to its glyph(a grid of pixels), draw these pixels onto the screen."}),"\n",(0,s.jsx)(n.h3,{id:"how-to-find-out-whether-the-file-uses-utf-8-or-ascii-or-other-encoding-schemas",children:"How to find out whether the file uses UTF-8 or ASCII or other encoding schemas?"}),"\n",(0,s.jsx)(n.p,{children:"It's not always foolproof because there is no universal mandate or requirement that all files must specify their encoding. But it's a good practice to add BOM(Byte Order Mark) at the beginning of a UTF-8 encoded file."}),"\n",(0,s.jsx)(n.h3,{id:"can-i-set-utf-16-as-locale-in-linux",children:"Can I set UTF-16 as locale in Linux?"}),"\n",(0,s.jsxs)(n.p,{children:["No, you cannot. Linux use ",(0,s.jsx)(n.code,{children:"UTF-8"})," encoding which is compatible with ",(0,s.jsx)(n.code,{children:"ASCII"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"what-happens-when-printing-a-utf-16-file-in-linux",children:"What happens when printing a UTF-16 file in Linux?"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:"# >>> '\u20ac'.encode(\"utf16\") -> b'\\xff\\xfe\\xac '\n$ echo -n -e \\\\xff\\\\xfe\\\\xac\\\\x20 > a.txt\n$ hexdump -C a.txt\n00000000  ff fe ac 20                                       |... |\n00000004\n$ file a.txt\na.txt: Unicode text, UTF-16, little-endian text, with no line terminators\n$ cat a.txt\n\ufffd\ufffd\ufffd\n$ iconv -f UTF-16LE -t UTF-8 a.txt\n\u20ac\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"how-can-i-check-a-utf-8-file-has-a-bom",children:["How can I check a UTF-8 file has a ",(0,s.jsx)(n.code,{children:"BOM"}),"?"]}),"\n",(0,s.jsxs)(n.p,{children:["Create a file without ",(0,s.jsx)(n.code,{children:"BOM"}),","]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-py",children:">>> f.flush()\n>>> b'\\xe2\\x82\\xac'.decode()\n'\u20ac'\n>>> '\u20ac'.encode()\nb'\\xe2\\x82\\xac'\n>>> bom=b\"\\xef\\xbb\\xbf\"\n>>> f=open(\"a.txt\", \"wb+\")\n>>> f.write(b'\\xe2\\x82\\xac')\n3\n>>> f.flush()\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:"$ file a.txt\na.txt: Unicode text, UTF-8 text, with no line terminators\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Create a ",(0,s.jsx)(n.code,{children:"BOM"})," adhere file,"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-py",children:">>> f.seek(0)\n0\n>>> f.truncate(0)\n0\n>>> f.write(b'\\xef\\xbb\\xbf\\xe2\\x82\\xac')\n6\n>>> f.flush()\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:"$ file a.txt\na.txt: Unicode text, UTF-8 (with BOM) text, with no line terminators\n$ hexdump -C a.txt\n00000000  ef bb bf e2 82 ac                                 |......|\n00000006\n"})}),"\n",(0,s.jsx)(n.h3,{id:"why-we-can-copy-and-paste-the-unicode-characters-into-a-shell",children:"Why we can copy and paste the unicode characters into a shell?"}),"\n",(0,s.jsxs)(n.p,{children:["When we do copying on the screen, we're copying the character's UTF8 encoded ",(0,s.jsx)(n.strong,{children:"bytes"})," which is in the memory, not the ",(0,s.jsx)(n.strong,{children:"code point"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:"# b'\\xe2\\x82\\xac'.decode() -> '\u20ac'\n$ echo -e \\\\xe2\\\\x82\\\\xac | xclip -selection clipboard\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Then you can use your mouse right click to copy to the shell and you will see ",(0,s.jsx)(n.code,{children:"\u20ac"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"how-a-string-is-stored-in-memory-when-python-running",children:"How a string is stored in memory when Python running?"}),"\n",(0,s.jsx)(n.h2,{id:"unicode-in-json",children:"Unicode in JSON"}),"\n",(0,s.jsxs)(n.p,{children:["JSON(natively a text format) support the unicode character to be escaped or not. When ",(0,s.jsx)(n.strong,{children:"being escaped"}),", the character will be replaced with the unicode code point, then which will be represented in 6 or 8 ascii characters occupying 6 or 8 bytes. When ",(0,s.jsx)(n.strong,{children:"not being escaped"}),", the character will be represented as just one unicode character as itself occupying 1 to 4 bytes if using UTF-8."]}),"\n",(0,s.jsx)(n.p,{children:"Escaping will cost more storage but will be compatible in ASCII-only environments, as escaping force all characters to be ASCII characters."}),"\n",(0,s.jsx)(n.p,{children:"Case 1: Characters escaped,"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-py",children:'>>> import json\n>>> b=b\'{"text": "\\u4f60\\u597d"}\'\n>>> json.loads(b)\n{\'text\': \'\u4f60\u597d\'}jsn\n>>> json.dumps(json.loads(b))\n\'{"text": "\\\\u4f60\\\\u597d"}\'\n>>> json.dumps(json.loads(b), ensure_ascii=False)\n\'{"text": "\u4f60\u597d"}\'\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-py",children:'>>> f=open("a.txt", "w+")\n>>> f.write(json.dumps(json.loads(b)))\n24\n>>> f.flush()\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:'$ cat a.txt\n{"text": "\\u4f60\\u597d"}#\n$  hexdump -C a.txt\n00000000  7b 22 74 65 78 74 22 3a  20 22 5c 75 34 66 36 30  |{"text": "\\u4f60|\n00000010  5c 75 35 39 37 64 22 7d                           |\\u597d"}|\n00000018\n'})}),"\n",(0,s.jsx)(n.p,{children:"Case 2: Characters not escaped,"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-py",children:">>> f.seek(0)\n0\n>>> f.truncate(0)\n0\n>>> f.write(json.dumps(json.loads(b), ensure_ascii=False))\n14\n>>> f.flush()\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:'$ cat a.txt\n{"text": "\u4f60\u597d"}#\n$ hexdump -C a.txt\n00000000  7b 22 74 65 78 74 22 3a  20 22 e4 bd a0 e5 a5 bd  |{"text": "......|\n00000010  22 7d                                             |"}|\n00000012\n'})}),"\n",(0,s.jsx)(n.h2,{id:"base64",children:"Base64"}),"\n",(0,s.jsx)(n.p,{children:"Base64 is binary-to-text encoding schema which make bytes data to be represented in ASCII characters to be human readable."}),"\n",(0,s.jsx)(n.h2,{id:"python",children:"Python"}),"\n",(0,s.jsx)(n.h2,{id:"c-application",children:"C application"}),"\n",(0,s.jsxs)(n.p,{children:["Let's have a look at how the ",(0,s.jsx)(n.strong,{children:"Unicode"})," is represented in a ",(0,s.jsx)(n.code,{children:"C"})," executable file."]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"char"})}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:'cat > unicode.c << EOL\n#include <stdio.h>\n\nint main(){\n    printf("Hello, World \u4f60\u597d\ud83e\udd28!\\n");\n    return 0;\n}\nEOL\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:"gcc unicode.c -o unicode.out\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:'root@112b172acfff:/workspaces/liviaerxin.github.io/# hexdump -C unicode.out | grep -A3 "Hello, World"\n00002000  01 00 02 00 48 65 6c 6c  6f 2c 20 57 6f 72 6c 64  |....Hello, World|\n00002010  20 e4 bd a0 e5 a5 bd f0  9f a4 a8 21 00 00 00 00  | ..........!....|\n00002020  01 1b 03 3b 34 00 00 00  05 00 00 00 00 f0 ff ff  |...;4...........|\n00002030  68 00 00 00 20 f0 ff ff  90 00 00 00 30 f0 ff ff  |h... .......0...|\n'})}),"\n",(0,s.jsxs)(n.p,{children:["View each character's ",(0,s.jsx)(n.strong,{children:"UTF8"})," encoding respectively,"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-py",children:"# utf-8 encoding bytes\n>>> \"\u4f60\".encode()\nb'\\xe4\\xbd\\xa0'\n>>> \"\u597d\".encode()\nb'\\xe5\\xa5\\xbd'\n>>> \"\ud83e\udd28\".encode()\nb'\\xf0\\x9f\\xa4\\xa8'\n"})}),"\n",(0,s.jsxs)(n.p,{children:["So  ",(0,s.jsx)(n.code,{children:"char"})," in the C output file stores the UTF8 encoding ",(0,s.jsx)(n.strong,{children:"bytes"}),", not the code points."]}),"\n",(0,s.jsxs)(n.ol,{start:"2",children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"wide char"}),","]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:'cat > unicode.c << EOL\n#include <stdio.h>\n#include <wchar.h>\n#include <locale.h>\n\nint main(int argc, char *argv[])\n{\n    setlocale(LC_ALL, "C.UTF-8");\n    wchar_t* msg = L"Hello, World \u4f60\u597d\ud83e\udd28!";\n    printf("%ls\\n", msg);\n    return 0;\n}\nEOL\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:"root@112b172acfff:/workspaces/liviaerxin.github.io/# hexdump -C unicode.out\n00002000  01 00 02 00 00 00 00 00  43 2e 55 54 46 2d 38 00  |........C.UTF-8.|\n00002010  48 00 00 00 65 00 00 00  6c 00 00 00 6c 00 00 00  |H...e...l...l...|\n00002020  6f 00 00 00 2c 00 00 00  20 00 00 00 57 00 00 00  |o...,... ...W...|\n00002030  6f 00 00 00 72 00 00 00  6c 00 00 00 64 00 00 00  |o...r...l...d...|\n00002040  20 00 00 00 60 4f 00 00  7d 59 00 00 28 f9 01 00  | ...`O..}Y..(...|\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-py",children:"# unicode code point\n>>> hex(ord(\"H\"))\n'0x48'\n>>> hex(ord(\"\u4f60\"))\n'0x4f60'\n>>> hex(ord(\"\u597d\"))\n'0x597d'\n>>> hex(ord(\"\ud83e\udd28\"))\n'0x1f928'\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"wchar"})," in the C output file stores the ",(0,s.jsx)(n.strong,{children:"code point"}),"(also in ",(0,s.jsx)(n.strong,{children:"little endian"}),"), not the UTF8 encoding ",(0,s.jsx)(n.strong,{children:"bytes"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["In conclusion, ",(0,s.jsx)(n.code,{children:"char"})," and ",(0,s.jsx)(n.code,{children:"wchar"})," lead different encoding in ",(0,s.jsx)(n.strong,{children:"C"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"references",children:"References"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://www.joelonsoftware.com/2003/10/08/the-absolute-minimum-every-software-developer-absolutely-positively-must-know-about-unicode-and-character-sets-no-excuses/",children:"The Absolute Minimum Every Software Developer Absolutely, Positively Must Know About Unicode and Character Sets (No Excuses!) \u2013 Joel on Software"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://nedbatchelder.com/text/unipain.html",children:"Pragmatic Unicode | Ned Batchelder"})})]})}function h(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var i=t(96540);const s={},c=i.createContext(s);function a(e){const n=i.useContext(c);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(c.Provider,{value:n},e.children)}},79297:e=>{e.exports=JSON.parse('{"permalink":"/blog/how-to-unicode","editUrl":"https://github.com/liviaerxin/liviaerxin.github.io/edit/master/docs/practice/../../blog/how-to-unicode.mdx","source":"@site/../../blog/how-to-unicode.mdx","title":"Playing with unicode in deep","description":"Playing with Unicode in deep","date":"2023-12-08T00:00:00.000Z","tags":[{"inline":true,"label":"how-to","permalink":"/blog/tags/how-to"},{"inline":true,"label":"unicode","permalink":"/blog/tags/unicode"}],"readingTime":5.685,"hasTruncateMarker":true,"authors":[{"name":"Frank Chen","title":"Backend & Applied ML Engineer","url":"https://github.com/liviaerxin","imageURL":"https://github.com/liviaerxin.png","key":"frank","page":null}],"frontMatter":{"authors":["frank"],"tags":["how-to","unicode"],"description":"Playing with Unicode in deep","keywords":["how-to","UTF8","encode"],"image":"https://i.imgur.com/mErPwqL.png","date":"2023-12-08T00:00:00.000Z","draft":false,"enableComments":true},"unlisted":false,"prevItem":{"title":"Making your own Dotfiles for your sake","permalink":"/blog/how-to-dotfiles"},"nextItem":{"title":"Discovering QEMU","permalink":"/blog/how-to-qemu"}}')}}]);