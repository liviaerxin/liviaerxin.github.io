"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[7390],{28453:(e,d,s)=>{s.d(d,{R:()=>i,x:()=>c});var n=s(96540);const t={},r=n.createContext(t);function i(e){const d=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(d):{...d,...e}}),[d,e])}function c(e){let d;return d=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),n.createElement(r.Provider,{value:d},e.children)}},82249:(e,d,s)=>{s.r(d),s.d(d,{assets:()=>l,contentTitle:()=>c,default:()=>o,frontMatter:()=>i,metadata:()=>n,toc:()=>h});const n=JSON.parse('{"id":"cheat-sheet/cheatsheet-assembly-x64","title":"x64 Assembly Cheat Sheet","description":"x64 NASM Cheat Sheet","source":"@site/../../docs/cheat-sheet/cheatsheet-assembly-x64.mdx","sourceDirName":"cheat-sheet","slug":"/cheat-sheet/cheatsheet-assembly-x64","permalink":"/docs/cheat-sheet/cheatsheet-assembly-x64","draft":false,"unlisted":false,"editUrl":"https://github.com/liviaerxin/liviaerxin.github.io/edit/master/_ssg/docusaurus/../../docs/cheat-sheet/cheatsheet-assembly-x64.mdx","tags":[{"inline":true,"label":"cheat sheet","permalink":"/docs/tags/cheat-sheet"},{"inline":true,"label":"x64","permalink":"/docs/tags/x-64"},{"inline":true,"label":"nasm","permalink":"/docs/tags/nasm"},{"inline":true,"label":"gas","permalink":"/docs/tags/gas"}],"version":"current","lastUpdatedBy":"liviaerxin","lastUpdatedAt":1746506890000,"frontMatter":{"authors":["frank"],"tags":["cheat sheet","x64","nasm","gas"],"description":"x64 NASM Cheat Sheet","keywords":["x64 NASM cheat sheet"],"image":"https://i.imgur.com/mErPwqL.png","date":"2025-01-14T00:00:00.000Z","draft":false,"enableComments":true},"sidebar":"docs","previous":{"title":"ARM64/AArch64 Assembly Cheat Sheet","permalink":"/docs/cheat-sheet/cheatsheet-assembly-arm64"},"next":{"title":"Docker Cheat Sheet","permalink":"/docs/cheat-sheet/cheatsheet-docker"}}');var t=s(74848),r=s(28453);const i={authors:["frank"],tags:["cheat sheet","x64","nasm","gas"],description:"x64 NASM Cheat Sheet",keywords:["x64 NASM cheat sheet"],image:"https://i.imgur.com/mErPwqL.png",date:new Date("2025-01-14T00:00:00.000Z"),draft:!1,enableComments:!0},c="x64 Assembly Cheat Sheet",l={},h=[{value:"Registers",id:"registers",level:2},{value:"Data Type",id:"data-type",level:2},{value:"Memory and Addressing Modes",id:"memory-and-addressing-modes",level:2},{value:"Size Directives in <code>mov</code>",id:"size-directives-in-mov",level:2},{value:"Common instructions",id:"common-instructions",level:2},{value:"Mov and lea",id:"mov-and-lea",level:3},{value:"Stack operation",id:"stack-operation",level:2},{value:"Calling Convention",id:"calling-convention",level:2},{value:"Program structure",id:"program-structure",level:2},{value:"Syscalls",id:"syscalls",level:2},{value:"Calling C functions",id:"calling-c-functions",level:2},{value:"Assemble",id:"assemble",level:2},{value:"Resources",id:"resources",level:2}];function x(e){const d={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(d.header,{children:(0,t.jsx)(d.h1,{id:"x64-assembly-cheat-sheet",children:"x64 Assembly Cheat Sheet"})}),"\n",(0,t.jsx)(d.p,{children:"Including two main assembler:"}),"\n",(0,t.jsxs)(d.ul,{children:["\n",(0,t.jsx)(d.li,{children:"GNU Assembler(GAS): AT&T syntax"}),"\n",(0,t.jsx)(d.li,{children:"NASM: Intel syntax"}),"\n"]}),"\n",(0,t.jsx)(d.h2,{id:"registers",children:"Registers"}),"\n",(0,t.jsxs)(d.table,{children:[(0,t.jsx)(d.thead,{children:(0,t.jsxs)(d.tr,{children:[(0,t.jsx)(d.th,{children:"Register"}),(0,t.jsx)(d.th,{children:"Low 32-bits"}),(0,t.jsx)(d.th,{children:"Low 16-bits"}),(0,t.jsx)(d.th,{children:"Low 8-bit"}),(0,t.jsx)(d.th,{children:"High 8-bits"}),(0,t.jsx)(d.th,{children:"Calling convention"}),(0,t.jsx)(d.th,{children:"Callee-saved?"})]})}),(0,t.jsxs)(d.tbody,{children:[(0,t.jsxs)(d.tr,{children:[(0,t.jsx)(d.td,{children:"General-purpose:"}),(0,t.jsx)(d.td,{}),(0,t.jsx)(d.td,{}),(0,t.jsx)(d.td,{}),(0,t.jsx)(d.td,{}),(0,t.jsx)(d.td,{}),(0,t.jsx)(d.td,{})]}),(0,t.jsxs)(d.tr,{children:[(0,t.jsx)(d.td,{children:(0,t.jsx)(d.code,{children:"%rax"})}),(0,t.jsx)(d.td,{children:(0,t.jsx)(d.code,{children:"%eax"})}),(0,t.jsx)(d.td,{children:(0,t.jsx)(d.code,{children:"%ax"})}),(0,t.jsx)(d.td,{children:(0,t.jsx)(d.code,{children:"%al"})}),(0,t.jsx)(d.td,{children:(0,t.jsx)(d.code,{children:"%ah"})}),(0,t.jsx)(d.td,{children:"Return value"}),(0,t.jsx)(d.td,{children:"No"})]}),(0,t.jsxs)(d.tr,{children:[(0,t.jsx)(d.td,{children:(0,t.jsx)(d.code,{children:"%rbx"})}),(0,t.jsx)(d.td,{children:(0,t.jsx)(d.code,{children:"%ebx"})}),(0,t.jsx)(d.td,{children:(0,t.jsx)(d.code,{children:"%bx"})}),(0,t.jsx)(d.td,{children:(0,t.jsx)(d.code,{children:"%bl"})}),(0,t.jsx)(d.td,{children:(0,t.jsx)(d.code,{children:"%bh"})}),(0,t.jsx)(d.td,{children:"-"}),(0,t.jsx)(d.td,{children:"Yes"})]}),(0,t.jsxs)(d.tr,{children:[(0,t.jsx)(d.td,{children:(0,t.jsx)(d.code,{children:"%rcx"})}),(0,t.jsx)(d.td,{children:(0,t.jsx)(d.code,{children:"%ecx"})}),(0,t.jsx)(d.td,{children:(0,t.jsx)(d.code,{children:"%cx"})}),(0,t.jsx)(d.td,{children:(0,t.jsx)(d.code,{children:"%cl"})}),(0,t.jsx)(d.td,{children:(0,t.jsx)(d.code,{children:"%ch"})}),(0,t.jsx)(d.td,{children:"4th argument"}),(0,t.jsx)(d.td,{children:"Yes"})]}),(0,t.jsxs)(d.tr,{children:[(0,t.jsx)(d.td,{children:(0,t.jsx)(d.code,{children:"%rdx"})}),(0,t.jsx)(d.td,{children:(0,t.jsx)(d.code,{children:"%edx"})}),(0,t.jsx)(d.td,{children:(0,t.jsx)(d.code,{children:"%dx"})}),(0,t.jsx)(d.td,{children:(0,t.jsx)(d.code,{children:"%dl"})}),(0,t.jsx)(d.td,{children:(0,t.jsx)(d.code,{children:"%dh"})}),(0,t.jsx)(d.td,{children:"3th argument"}),(0,t.jsx)(d.td,{children:"Yes"})]}),(0,t.jsxs)(d.tr,{children:[(0,t.jsx)(d.td,{children:(0,t.jsx)(d.code,{children:"%rsi"})}),(0,t.jsx)(d.td,{children:(0,t.jsx)(d.code,{children:"%esi"})}),(0,t.jsx)(d.td,{children:(0,t.jsx)(d.code,{children:"%si"})}),(0,t.jsx)(d.td,{children:(0,t.jsx)(d.code,{children:"%sil"})}),(0,t.jsx)(d.td,{children:"-"}),(0,t.jsx)(d.td,{children:"2st argument"}),(0,t.jsx)(d.td,{children:"No"})]}),(0,t.jsxs)(d.tr,{children:[(0,t.jsx)(d.td,{children:(0,t.jsx)(d.code,{children:"%rdi"})}),(0,t.jsx)(d.td,{children:(0,t.jsx)(d.code,{children:"%edi"})}),(0,t.jsx)(d.td,{children:(0,t.jsx)(d.code,{children:"%di"})}),(0,t.jsx)(d.td,{children:(0,t.jsx)(d.code,{children:"%dil"})}),(0,t.jsx)(d.td,{children:"-"}),(0,t.jsx)(d.td,{children:"1st argument"}),(0,t.jsx)(d.td,{children:"No"})]}),(0,t.jsxs)(d.tr,{children:[(0,t.jsx)(d.td,{children:(0,t.jsx)(d.code,{children:"%r8"})}),(0,t.jsx)(d.td,{children:(0,t.jsx)(d.code,{children:"%r8d"})}),(0,t.jsx)(d.td,{children:(0,t.jsx)(d.code,{children:"%r8w"})}),(0,t.jsx)(d.td,{children:(0,t.jsx)(d.code,{children:"%r8b"})}),(0,t.jsx)(d.td,{children:"-"}),(0,t.jsx)(d.td,{children:"5th argument"}),(0,t.jsx)(d.td,{children:"No"})]}),(0,t.jsxs)(d.tr,{children:[(0,t.jsx)(d.td,{children:(0,t.jsx)(d.code,{children:"%r9"})}),(0,t.jsx)(d.td,{children:(0,t.jsx)(d.code,{children:"%r9d"})}),(0,t.jsx)(d.td,{children:(0,t.jsx)(d.code,{children:"%r9w"})}),(0,t.jsx)(d.td,{children:(0,t.jsx)(d.code,{children:"%r9b"})}),(0,t.jsx)(d.td,{children:"-"}),(0,t.jsx)(d.td,{children:"6th argument"}),(0,t.jsx)(d.td,{children:"No"})]}),(0,t.jsxs)(d.tr,{children:[(0,t.jsx)(d.td,{children:(0,t.jsx)(d.code,{children:"%r10"})}),(0,t.jsx)(d.td,{children:(0,t.jsx)(d.code,{children:"%r10d"})}),(0,t.jsx)(d.td,{children:(0,t.jsx)(d.code,{children:"%r10w"})}),(0,t.jsx)(d.td,{children:(0,t.jsx)(d.code,{children:"%r10b"})}),(0,t.jsx)(d.td,{children:"-"}),(0,t.jsx)(d.td,{children:"-"}),(0,t.jsx)(d.td,{children:"No"})]}),(0,t.jsxs)(d.tr,{children:[(0,t.jsx)(d.td,{children:(0,t.jsx)(d.code,{children:"%r11"})}),(0,t.jsx)(d.td,{children:(0,t.jsx)(d.code,{children:"%r11d"})}),(0,t.jsx)(d.td,{children:(0,t.jsx)(d.code,{children:"%r11w"})}),(0,t.jsx)(d.td,{children:(0,t.jsx)(d.code,{children:"%r11b"})}),(0,t.jsx)(d.td,{children:"-"}),(0,t.jsx)(d.td,{children:"-"}),(0,t.jsx)(d.td,{children:"No"})]}),(0,t.jsxs)(d.tr,{children:[(0,t.jsx)(d.td,{children:(0,t.jsx)(d.code,{children:"%r12"})}),(0,t.jsx)(d.td,{children:(0,t.jsx)(d.code,{children:"%r12d"})}),(0,t.jsx)(d.td,{children:(0,t.jsx)(d.code,{children:"%r12w"})}),(0,t.jsx)(d.td,{children:(0,t.jsx)(d.code,{children:"%r12b"})}),(0,t.jsx)(d.td,{children:"-"}),(0,t.jsx)(d.td,{children:"-"}),(0,t.jsx)(d.td,{children:"Yes"})]}),(0,t.jsxs)(d.tr,{children:[(0,t.jsx)(d.td,{children:(0,t.jsx)(d.code,{children:"%r13"})}),(0,t.jsx)(d.td,{children:(0,t.jsx)(d.code,{children:"%r13d"})}),(0,t.jsx)(d.td,{children:(0,t.jsx)(d.code,{children:"%r13w"})}),(0,t.jsx)(d.td,{children:(0,t.jsx)(d.code,{children:"%r13b"})}),(0,t.jsx)(d.td,{children:"-"}),(0,t.jsx)(d.td,{children:"-"}),(0,t.jsx)(d.td,{children:"Yes"})]}),(0,t.jsxs)(d.tr,{children:[(0,t.jsx)(d.td,{children:(0,t.jsx)(d.code,{children:"%r14"})}),(0,t.jsx)(d.td,{children:(0,t.jsx)(d.code,{children:"%r14d"})}),(0,t.jsx)(d.td,{children:(0,t.jsx)(d.code,{children:"%r14w"})}),(0,t.jsx)(d.td,{children:(0,t.jsx)(d.code,{children:"%r14b"})}),(0,t.jsx)(d.td,{children:"-"}),(0,t.jsx)(d.td,{children:"-"}),(0,t.jsx)(d.td,{children:"Yes"})]}),(0,t.jsxs)(d.tr,{children:[(0,t.jsx)(d.td,{children:(0,t.jsx)(d.code,{children:"%r15"})}),(0,t.jsx)(d.td,{children:(0,t.jsx)(d.code,{children:"%r15d"})}),(0,t.jsx)(d.td,{children:(0,t.jsx)(d.code,{children:"%r15w"})}),(0,t.jsx)(d.td,{children:(0,t.jsx)(d.code,{children:"%r15b"})}),(0,t.jsx)(d.td,{children:"-"}),(0,t.jsx)(d.td,{children:"-"}),(0,t.jsx)(d.td,{children:"Yes"})]}),(0,t.jsxs)(d.tr,{children:[(0,t.jsx)(d.td,{children:"Special-purpose:"}),(0,t.jsx)(d.td,{}),(0,t.jsx)(d.td,{}),(0,t.jsx)(d.td,{}),(0,t.jsx)(d.td,{}),(0,t.jsx)(d.td,{}),(0,t.jsx)(d.td,{})]}),(0,t.jsxs)(d.tr,{children:[(0,t.jsx)(d.td,{children:(0,t.jsx)(d.code,{children:"%rsp"})}),(0,t.jsx)(d.td,{children:(0,t.jsx)(d.code,{children:"%esp"})}),(0,t.jsx)(d.td,{children:(0,t.jsx)(d.code,{children:"%sp"})}),(0,t.jsx)(d.td,{children:(0,t.jsx)(d.code,{children:"%spl"})}),(0,t.jsx)(d.td,{children:"\u2013"}),(0,t.jsx)(d.td,{children:"Stack pointer"}),(0,t.jsx)(d.td,{children:"Yes"})]}),(0,t.jsxs)(d.tr,{children:[(0,t.jsx)(d.td,{children:(0,t.jsx)(d.code,{children:"%rbp"})}),(0,t.jsx)(d.td,{children:(0,t.jsx)(d.code,{children:"%ebp"})}),(0,t.jsx)(d.td,{children:(0,t.jsx)(d.code,{children:"%bp"})}),(0,t.jsx)(d.td,{children:(0,t.jsx)(d.code,{children:"%bpl"})}),(0,t.jsx)(d.td,{children:"\u2013"}),(0,t.jsx)(d.td,{children:"Base pointer"}),(0,t.jsx)(d.td,{children:"Yes"})]}),(0,t.jsxs)(d.tr,{children:[(0,t.jsx)(d.td,{children:(0,t.jsx)(d.code,{children:"%rip"})}),(0,t.jsx)(d.td,{children:(0,t.jsx)(d.code,{children:"%eip"})}),(0,t.jsx)(d.td,{children:(0,t.jsx)(d.code,{children:"%ip"})}),(0,t.jsx)(d.td,{children:"-"}),(0,t.jsx)(d.td,{children:"\u2013"}),(0,t.jsx)(d.td,{children:"Instruction pointer"}),(0,t.jsx)(d.td,{children:"-"})]}),(0,t.jsxs)(d.tr,{children:[(0,t.jsx)(d.td,{children:(0,t.jsx)(d.code,{children:"%rflags"})}),(0,t.jsx)(d.td,{children:(0,t.jsx)(d.code,{children:"%eflags"})}),(0,t.jsx)(d.td,{children:(0,t.jsx)(d.code,{children:"%flags"})}),(0,t.jsx)(d.td,{children:"-"}),(0,t.jsx)(d.td,{children:"\u2013"}),(0,t.jsx)(d.td,{children:"Flags and condition codes"}),(0,t.jsx)(d.td,{children:"No"})]})]})]}),"\n",(0,t.jsx)(d.h2,{id:"data-type",children:"Data Type"}),"\n",(0,t.jsxs)(d.table,{children:[(0,t.jsx)(d.thead,{children:(0,t.jsxs)(d.tr,{children:[(0,t.jsx)(d.th,{children:"Definition size"}),(0,t.jsx)(d.th,{children:"NASM"}),(0,t.jsx)(d.th,{children:"-"}),(0,t.jsx)(d.th,{children:"GAS"}),(0,t.jsx)(d.th,{children:"suffix"})]})}),(0,t.jsxs)(d.tbody,{children:[(0,t.jsxs)(d.tr,{children:[(0,t.jsx)(d.td,{children:"8 bit"}),(0,t.jsx)(d.td,{children:(0,t.jsx)(d.code,{children:"db"})}),(0,t.jsx)(d.td,{children:(0,t.jsx)(d.code,{children:"BYTE"})}),(0,t.jsx)(d.td,{children:(0,t.jsx)(d.code,{children:"byte"})}),(0,t.jsx)(d.td,{children:(0,t.jsx)(d.code,{children:"b"})})]}),(0,t.jsxs)(d.tr,{children:[(0,t.jsx)(d.td,{children:"16 bit"}),(0,t.jsx)(d.td,{children:(0,t.jsx)(d.code,{children:"dw"})}),(0,t.jsx)(d.td,{children:(0,t.jsx)(d.code,{children:"WORD"})}),(0,t.jsxs)(d.td,{children:[(0,t.jsx)(d.code,{children:"short"}),"/",(0,t.jsx)(d.code,{children:"word"}),"/",(0,t.jsx)(d.code,{children:"2byte"})]}),(0,t.jsx)(d.td,{children:(0,t.jsx)(d.code,{children:"w"})})]}),(0,t.jsxs)(d.tr,{children:[(0,t.jsx)(d.td,{children:"32 bit"}),(0,t.jsx)(d.td,{children:(0,t.jsx)(d.code,{children:"dd"})}),(0,t.jsx)(d.td,{children:(0,t.jsx)(d.code,{children:"DWORD"})}),(0,t.jsxs)(d.td,{children:[(0,t.jsx)(d.code,{children:"long"}),"/",(0,t.jsx)(d.code,{children:"int"}),"/",(0,t.jsx)(d.code,{children:"4byte"})]}),(0,t.jsx)(d.td,{children:(0,t.jsx)(d.code,{children:"l"})})]}),(0,t.jsxs)(d.tr,{children:[(0,t.jsx)(d.td,{children:"64 bit"}),(0,t.jsxs)(d.td,{children:[(0,t.jsx)(d.code,{children:"ddq"}),"/",(0,t.jsx)(d.code,{children:"do"})]}),(0,t.jsx)(d.td,{children:(0,t.jsx)(d.code,{children:"QWORD"})}),(0,t.jsxs)(d.td,{children:[(0,t.jsx)(d.code,{children:"quad"}),"/",(0,t.jsx)(d.code,{children:"8byte"})]}),(0,t.jsx)(d.td,{children:(0,t.jsx)(d.code,{children:"q"})})]}),(0,t.jsxs)(d.tr,{children:[(0,t.jsx)(d.td,{children:"float"}),(0,t.jsx)(d.td,{children:(0,t.jsx)(d.code,{children:"dd"})}),(0,t.jsx)(d.td,{children:"-"}),(0,t.jsx)(d.td,{children:"-"}),(0,t.jsx)(d.td,{})]}),(0,t.jsxs)(d.tr,{children:[(0,t.jsx)(d.td,{children:"double"}),(0,t.jsx)(d.td,{children:(0,t.jsx)(d.code,{children:"dq"})}),(0,t.jsx)(d.td,{children:"-"}),(0,t.jsx)(d.td,{children:"-"}),(0,t.jsx)(d.td,{})]}),(0,t.jsxs)(d.tr,{children:[(0,t.jsx)(d.td,{children:"extended precision"}),(0,t.jsx)(d.td,{children:(0,t.jsx)(d.code,{children:"dt"})}),(0,t.jsx)(d.td,{children:"-"}),(0,t.jsx)(d.td,{children:"-"}),(0,t.jsx)(d.td,{})]}),(0,t.jsxs)(d.tr,{children:[(0,t.jsx)(d.td,{children:"string"}),(0,t.jsx)(d.td,{children:"-"}),(0,t.jsx)(d.td,{children:"-"}),(0,t.jsxs)(d.td,{children:[(0,t.jsx)(d.code,{children:"ascii"}),"/",(0,t.jsx)(d.code,{children:"asciz"})]}),(0,t.jsx)(d.td,{children:"-"})]})]})]}),"\n",(0,t.jsx)(d.pre,{children:(0,t.jsx)(d.code,{className:"language-asm",children:".data\n  int8 .db 0x7f\n  msg .db 0x7f, 'E', 'L', 'F', 1, 1, 1, 0\n"})}),"\n",(0,t.jsx)(d.pre,{children:(0,t.jsx)(d.code,{className:"language-asm",children:".data\n  int8 .byte 0x7f\n  msg .byte 0x7f, 'E', 'L', 'F', 1, 1, 1, 0\n  ms  .asciz \"ELF\"\n  ms  .ascii \"ELF\", 0x0\n"})}),"\n",(0,t.jsx)(d.h2,{id:"memory-and-addressing-modes",children:"Memory and Addressing Modes"}),"\n",(0,t.jsx)(d.pre,{children:(0,t.jsx)(d.code,{className:"language-asm",children:"mov eax, [ebx]\t; Move the 4 bytes in memory at the address contained in EBX into EAX\nmov [var], ebx\t; Move the contents of EBX into the 4 bytes at memory address var. (Note, var is a 32-bit constant).\nmov eax, [esi-4]\t; Move 4 bytes at memory address ESI + (-4) into EAX\nmov [esi+eax], cl\t; Move the contents of CL into the byte at address ESI+EAX\nmov edx, [esi+4*ebx]    \t; Move the 4 bytes of data at address ESI+4*EBX into EDX\n"})}),"\n",(0,t.jsx)(d.pre,{children:(0,t.jsx)(d.code,{className:"language-asm",children:"mov (%ebx), %eax\t/* Load 4 bytes from the memory address in EBX into EAX. */\nmov %ebx, var(,1)\t/* Move the contents of EBX into the 4 bytes at memory address var.\n(Note, var is a 32-bit constant). */\nmov -4(%esi), %eax\t/* Move 4 bytes at memory address ESI + (-4) into EAX. */\nmov %cl, (%esi,%eax,1)   \t/* Move the contents of CL into the byte at address ESI+EAX. */\nmov (%esi,%ebx,4), %edx     \t/* Move the 4 bytes of data at address ESI+4*EBX into EDX. */\n"})}),"\n",(0,t.jsxs)(d.h2,{id:"size-directives-in-mov",children:["Size Directives in ",(0,t.jsx)(d.code,{children:"mov"})]}),"\n",(0,t.jsx)(d.pre,{children:(0,t.jsx)(d.code,{className:"language-asm",children:"mov BYTE [ebx], 2\t; Move 2 into the single byte at the address stored in EBX.\nmov WORD [ebx], 2\t; Move the 16-bit integer representation of 2 into the 2 bytes starting at the address in EBX.\nmov DWORD [ebx], 2    \t; Move the 32-bit integer representation of 2 into the 4 bytes starting at the address in EBX.\n"})}),"\n",(0,t.jsx)(d.pre,{children:(0,t.jsx)(d.code,{className:"language-asm",children:"movb $2, (%ebx)\t/* Move 2 into the single byte at the address stored in EBX. */\nmovw $2, (%ebx)\t/* Move the 16-bit integer representation of 2 into the 2 bytes starting at the address in EBX. */\nmovl $2, (%ebx)     \t/* Move the 32-bit integer representation of 2 into the 4 bytes starting at the address in EBX. */\n"})}),"\n",(0,t.jsx)(d.pre,{children:(0,t.jsx)(d.code,{className:"language-asm",children:"movsbl %al, %edx    # copy 1-byte %al, sign-extend into 4-byte %edx\nmovzbl %al, %edx    # copy 1-byte %al, zero-extend into 4-byte %edx\n"})}),"\n",(0,t.jsx)(d.h2,{id:"common-instructions",children:"Common instructions"}),"\n",(0,t.jsx)(d.h3,{id:"mov-and-lea",children:"Mov and lea"}),"\n",(0,t.jsx)(d.pre,{children:(0,t.jsx)(d.code,{className:"language-asm",children:"mov src, dst              # general form of instruction dst = src\nmov $0, %eax              # %eax = 0\nmovb %al, 0x409892        # write to address 0x409892 low-byte of %eax\nmov 8(%rsp), %eax         # %eax = value read from address %rsp + 8\n\nlea 0x20(%rsp), %rdi      # %rdi = %rsp + 0x20 (no dereference!)\nlea (%rdi,%rdx,1), %rax   # %rax = %rdi + %rdx\n"})}),"\n",(0,t.jsx)(d.h2,{id:"stack-operation",children:"Stack operation"}),"\n",(0,t.jsx)(d.pre,{children:(0,t.jsx)(d.code,{className:"language-asm",children:"push %rbx         # push value of %rbx onto stack\npushq $0x3        # push immediate value 3 onto stack\nsub $0x10, %rsp   # adjust stack pointer to set aside 16 more bytes\n\npop %rax          # pop topmost value from stack into register %rax\nadd $0x10, %rsp   # adjust stack point to remove topmost 16 bytes\n"})}),"\n",(0,t.jsx)(d.h2,{id:"calling-convention",children:"Calling Convention"}),"\n",(0,t.jsx)(d.pre,{children:(0,t.jsx)(d.code,{className:"language-asm",children:"mov $0x3, %rdi    # first arg is passed in %rdi\nmov $0x7, %rsi    # second arg is passed in %rsi\ncallq binky       # transfers control to function binky\n"})}),"\n",(0,t.jsx)(d.h2,{id:"program-structure",children:"Program structure"}),"\n",(0,t.jsxs)(d.ul,{children:["\n",(0,t.jsxs)(d.li,{children:[(0,t.jsx)(d.code,{children:"global <entry>"})," -> exposes entry point"]}),"\n",(0,t.jsxs)(d.li,{children:[(0,t.jsx)(d.code,{children:"extern <function>"})," -> declares a function in another linked .o file (e.g. C\nfunction, other asm file)"]}),"\n",(0,t.jsxs)(d.li,{children:[(0,t.jsx)(d.code,{children:"section <sectiontype>"})," -> sets section, usually:","\n",(0,t.jsxs)(d.ul,{children:["\n",(0,t.jsxs)(d.li,{children:[(0,t.jsx)(d.code,{children:".text"})," -> program code"]}),"\n",(0,t.jsxs)(d.li,{children:[(0,t.jsx)(d.code,{children:".data"})," -> data"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(d.p,{children:["The program entry point of a standalone program is the label ",(0,t.jsx)(d.code,{children:"_start"}),".  When\ncompiled with gcc, C provides ",(0,t.jsx)(d.code,{children:"_start"}),", which inits and then jumps to ",(0,t.jsx)(d.code,{children:"main"}),",\nwhich should then be implemented by the program."]}),"\n",(0,t.jsx)(d.h2,{id:"syscalls",children:"Syscalls"}),"\n",(0,t.jsxs)(d.ul,{children:["\n",(0,t.jsx)(d.li,{children:"put syscall number in EAX (e.g. on Linux: 60 for exit, 1 for write to stdout)"}),"\n",(0,t.jsx)(d.li,{children:"put arguments in the registers (see above) like when calling a C function"}),"\n",(0,t.jsxs)(d.li,{children:["execute the ",(0,t.jsx)(d.code,{children:"syscall"})," instruction"]}),"\n"]}),"\n",(0,t.jsx)(d.h2,{id:"calling-c-functions",children:"Calling C functions"}),"\n",(0,t.jsx)(d.h2,{id:"assemble",children:"Assemble"}),"\n",(0,t.jsxs)(d.ul,{children:["\n",(0,t.jsxs)(d.li,{children:["Assemble: ",(0,t.jsx)(d.code,{children:"nasm -felf64 -o <object> <filename>"})]}),"\n",(0,t.jsxs)(d.li,{children:["Link with ld: ",(0,t.jsx)(d.code,{children:"ld -o <output> <object>"})]}),"\n",(0,t.jsxs)(d.li,{children:["Link with gcc: ",(0,t.jsx)(d.code,{children:"gcc -o <output> <object>"})]}),"\n"]}),"\n",(0,t.jsx)(d.h2,{id:"resources",children:"Resources"}),"\n",(0,t.jsx)(d.p,{children:(0,t.jsx)(d.a,{href:"https://cs61.seas.harvard.edu/site/2018/Asm1/",children:"Assembly 1: Basics \u2013 CS 61 2018"})}),"\n",(0,t.jsx)(d.p,{children:(0,t.jsx)(d.a,{href:"https://web.stanford.edu/class/cs107/guide/x86-64.html",children:"CS107 Guide to x86-64"})}),"\n",(0,t.jsx)(d.p,{children:(0,t.jsx)(d.a,{href:"https://gist.github.com/justinian/385c70347db8aca7ba93e87db90fc9a6",children:"x64 NASM Cheat Sheet \xb7 GitHub"})}),"\n",(0,t.jsx)(d.p,{children:(0,t.jsx)(d.a,{href:"https://cs.lmu.edu/~ray/notes/nasmtutorial/",children:"nasmtutorial"})}),"\n",(0,t.jsx)(d.p,{children:(0,t.jsx)(d.a,{href:"https://cs.lmu.edu/~ray/notes/gasexamples/",children:"gasexamples"})}),"\n",(0,t.jsx)(d.p,{children:(0,t.jsx)(d.a,{href:"https://flint.cs.yale.edu/cs421/papers/x86-asm/asm.html",children:"Guide to x86 Assembly"})})]})}function o(e={}){const{wrapper:d}={...(0,r.R)(),...e.components};return d?(0,t.jsx)(d,{...e,children:(0,t.jsx)(x,{...e})}):x(e)}}}]);