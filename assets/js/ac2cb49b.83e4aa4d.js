"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[8826],{10340:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>l,frontMatter:()=>r,metadata:()=>c,toc:()=>d});const c=JSON.parse('{"id":"practice/python-unicode-string","title":"Python Unicode String","description":"Python Unicode","source":"@site/../../docs/practice/python-unicode-string.mdx","sourceDirName":"practice","slug":"/practice/python-unicode-string","permalink":"/docs/practice/python-unicode-string","draft":false,"unlisted":false,"editUrl":"https://github.com/liviaerxin/liviaerxin.github.io/edit/master/_ssg/docusaurus/../../docs/practice/python-unicode-string.mdx","tags":[{"inline":true,"label":"Python","permalink":"/docs/tags/python"},{"inline":true,"label":"Unicode","permalink":"/docs/tags/unicode"},{"inline":true,"label":"ctypes","permalink":"/docs/tags/ctypes"}],"version":"current","lastUpdatedBy":"liviaerxin","lastUpdatedAt":1744927023000,"frontMatter":{"authors":["frank"],"tags":["Python","Unicode","ctypes"],"description":"Python Unicode","keywords":["Python Unicode","memory layout"],"image":"https://i.imgur.com/mErPwqL.png","date":"2024-12-13T00:00:00.000Z","draft":false,"enableComments":true},"sidebar":"docs","previous":{"title":"Python Package Management","permalink":"/docs/practice/python-package-management"},"next":{"title":"REST API Filtering, Sorting and Pagination","permalink":"/docs/practice/rest-api-filtering-sorting-pagination"}}');var i=t(74848),s=t(28453);const r={authors:["frank"],tags:["Python","Unicode","ctypes"],description:"Python Unicode",keywords:["Python Unicode","memory layout"],image:"https://i.imgur.com/mErPwqL.png",date:new Date("2024-12-13T00:00:00.000Z"),draft:!1,enableComments:!0},o="Python Unicode String",a={},d=[{value:"FAQ",id:"faq",level:2},{value:"Why Python doesn&#39;t use UTF-8 encoding variable-length bytes in memory directly, why it will convert them to <strong>UCS-2</strong> or <strong>UCS-4</strong> data?",id:"why-python-doesnt-use-utf-8-encoding-variable-length-bytes-in-memory-directly-why-it-will-convert-them-to-ucs-2-or-ucs-4-data",level:3},{value:"How do other programming languages access character in a string by index?",id:"how-do-other-programming-languages-access-character-in-a-string-by-index",level:3},{value:"How a string in Python is printed on the screen?",id:"how-a-string-in-python-is-printed-on-the-screen",level:3},{value:"How to write raw bytes to the terminal from Python?",id:"how-to-write-raw-bytes-to-the-terminal-from-python",level:3},{value:"An outline of the <code>PyUnicodeObject</code>",id:"an-outline-of-the-pyunicodeobject",level:2},{value:"How a Unicode string object is created?",id:"how-a-unicode-string-object-is-created",level:2},{value:"Inspect Unicode string object in Python 3",id:"inspect-unicode-string-object-in-python-3",level:2},{value:"Resources",id:"resources",level:2}];function h(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"python-unicode-string",children:"Python Unicode String"})}),"\n",(0,i.jsxs)(n.p,{children:["Python string use ",(0,i.jsx)(n.code,{children:"unicodeobject"})," which is implemented in ",(0,i.jsx)(n.code,{children:"C"})," in CPython:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://github.com/python/cpython/blob/main/Objects/unicodeobject.c",children:"unicodeobject.c"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://github.com/python/cpython/blob/main/Include/cpython/unicodeobject.h",children:"unicodeobject.h"})}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Python chooses one of these three kinds of data type to internally represent for a Unicode-characters string, so every Unicode character of the string has the same fixed-length: 1, 2 or 4,"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"UCS-1"}),"(1 byte), for ASCII characters between U+0000 and U+00FF"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"UCS-2"}),"(2 bytes), for Unicode characters between U+00FF and U+FFFF"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"UCS-4"}),"(4 bytes), for Unicode characters between U+00FFFF and U+10FFFF"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"There are 4 forms of Unicode strings:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"compact ascii"}),"\n",(0,i.jsx)(n.li,{children:"compact"}),"\n",(0,i.jsx)(n.li,{children:"legacy string"}),"\n",(0,i.jsx)(n.li,{children:"legacy string ready"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"legacy string"}),' as I see is already deprecated after Python3 and the official says: "it will be removed after Python 4".']}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"compact"})," make the ",(0,i.jsx)(n.code,{children:"characters"})," data start just after the ",(0,i.jsx)(n.code,{children:"PyASCIIObject"})," or ",(0,i.jsx)(n.code,{children:"PyCompactUnicodeObject"})," structure, using just one block, whereas ",(0,i.jsx)(n.code,{children:"legacy strings"})," use one block for the structure and one block for ",(0,i.jsx)(n.code,{children:"characters"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"characters"})," data are 1-byte, 2-byte or 4-byte ",(0,i.jsx)(n.code,{children:"code point"}),". The UnicodeObject will use the maximum length in fixed-size for each."]}),"\n",(0,i.jsx)(n.h2,{id:"faq",children:"FAQ"}),"\n",(0,i.jsxs)(n.h3,{id:"why-python-doesnt-use-utf-8-encoding-variable-length-bytes-in-memory-directly-why-it-will-convert-them-to-ucs-2-or-ucs-4-data",children:["Why Python doesn't use UTF-8 encoding variable-length bytes in memory directly, why it will convert them to ",(0,i.jsx)(n.strong,{children:"UCS-2"})," or ",(0,i.jsx)(n.strong,{children:"UCS-4"})," data?"]}),"\n",(0,i.jsx)(n.p,{children:"Keep each character in a string in the same width in the data memory."}),"\n",(0,i.jsx)(n.p,{children:"What's the purpose?"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Indexing into strings in Python is operated in a constant time, as it's based on the fixed-length encodings."}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"how-do-other-programming-languages-access-character-in-a-string-by-index",children:"How do other programming languages access character in a string by index?"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Go","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Iterating yields Unicode code point"}),"\n",(0,i.jsx)(n.li,{children:"Indexing yields a byte"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["Rust","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Iteration yields Unicode code point(",(0,i.jsx)(n.code,{children:"method.chars()"}),") or byte(",(0,i.jsx)(n.code,{children:"method.bytes"}),")"]}),"\n",(0,i.jsx)(n.li,{children:"Indexing not supported"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["Python","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Iterating yields Unicode code point"}),"\n",(0,i.jsx)(n.li,{children:"Indexing yields Unicode code point"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"how-a-string-in-python-is-printed-on-the-screen",children:"How a string in Python is printed on the screen?"}),"\n",(0,i.jsx)(n.p,{children:"You may wonder why they have the same result on the terminal from Python output, assuming that the terminal is using the UTF-8 encoding."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-py",children:">>> \"\\xe9\"\n'\xe9'\n>>> \"\\u00e9\"\n'\xe9'\n>>> '\xe9'\n'\xe9'\n"})}),"\n",(0,i.jsxs)(n.p,{children:["When Python prints string, here the ",(0,i.jsx)(n.code,{children:"print()"})," is used in default in Python IDE."]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["create ",(0,i.jsx)(n.code,{children:"PyObject"}),". When the string is ",(0,i.jsx)(n.code,{children:"\\xe9"})," or ",(0,i.jsx)(n.code,{children:"\\u00e9"}),", the Python interpret they as the ",(0,i.jsx)(n.strong,{children:"code point"})," of which ",(0,i.jsx)(n.code,{children:"0xe9"})," is ",(0,i.jsx)(n.code,{children:"233"})," in decimal. And convert it in ",(0,i.jsx)(n.code,{children:"PyUnicodeObject"})," of which  stores data use ",(0,i.jsx)(n.code,{children:"UCS-1"})," as ",(0,i.jsx)(n.code,{children:"0xe9"})," is one byte."]}),"\n",(0,i.jsxs)(n.li,{children:["print the ",(0,i.jsx)(n.code,{children:"PyUnicodeObject"}),". As the system locale uses UTF-8 Encoding, Python will convert ",(0,i.jsx)(n.code,{children:"UCS-1"})," data to utf-8 encoding bytes, which is ",(0,i.jsx)(n.code,{children:"b'\\xc3\\xa9'"}),".","\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-py",children:">>> '\xe9'.encode()\nb'\\xc3\\xa9'\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["send bytes to the terminal emulator. ",(0,i.jsx)(n.code,{children:"b'\\xc3\\xa9'"})," is sent to the terminal which uses the UTF-8 encoding. ",(0,i.jsx)(n.code,{children:"b'\\xc3\\xa9'"})," in utf-8 is decode as code point ",(0,i.jsx)(n.code,{children:"\\u00e9"})," which represent the character ",(0,i.jsx)(n.code,{children:"\xe9"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["draw character. The terminal emulator draw the glyph ",(0,i.jsx)(n.code,{children:"\xe9"})," on the screen as you see."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["If the terminal using ",(0,i.jsx)(n.code,{children:"latin-1"}),", ",(0,i.jsx)(n.code,{children:'"\\xe9"'})," will be show as ",(0,i.jsx)(n.code,{children:"\xc3\xa9"})," in the terminal."]}),"\n",(0,i.jsx)(n.h3,{id:"how-to-write-raw-bytes-to-the-terminal-from-python",children:"How to write raw bytes to the terminal from Python?"}),"\n",(0,i.jsx)(n.p,{children:"As you see above, Python print strings:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"firstly strings are encoded to utf-8 bytes."}),"\n",(0,i.jsx)(n.li,{children:"secondly these bytes are sent to the terminal."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Sometimes, you may want to write raw bytes in the terminal directly to see how the terminal represents these bytes on the screen."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"\u279c  ~ python3 -c 'import sys; sys.stdout.buffer.write(b\"\\xc3\\xa9\")'\n\xe9\n"})}),"\n",(0,i.jsxs)(n.p,{children:["UTF-8 terminal represent bytes ",(0,i.jsx)(n.code,{children:'b"\\xc3\\xa9"'})," to character ",(0,i.jsx)(n.code,{children:"\xe9"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"\u279c  ~ python3 -c 'import sys; sys.stdout.buffer.write(b\"\\xe9\")'\n\ufffd\n"})}),"\n",(0,i.jsxs)(n.p,{children:["UTF-8 terminal can not represent bytes ",(0,i.jsx)(n.code,{children:'b"\\xe9"'})," to any known character, as ",(0,i.jsx)(n.code,{children:'b"\\xe9"'})," is not a valid utf-8 encoding bytes."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://stackoverflow.com/questions/42179786/python3-print-raw-byte",children:"python - Python3 print raw byte - Stack Overflow"})}),"\n",(0,i.jsxs)(n.h2,{id:"an-outline-of-the-pyunicodeobject",children:["An outline of the ",(0,i.jsx)(n.code,{children:"PyUnicodeObject"})]}),"\n",(0,i.jsx)(n.p,{children:"References are mainly from:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://docs.python.org/3/library/ctypes.html",children:"ctypes \u2014 A foreign function library for Python \u2014 Python 3.12.1 documentation"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://github.com/python/cpython/blob/3.10/Include/cpython/unicodeobject.h#L85-L244",children:"unicodeobject.h"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://github.com/python/cpython/blob/3.10/Objects/unicodeobject.c",children:"unicodeobject.c"})}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["A brief ",(0,i.jsx)(n.code,{children:"PyUnicodeObject"})," structure defined from ",(0,i.jsx)(n.a,{href:"https://github.com/python/cpython/blob/3.10/Include/cpython/unicodeobject.h#L85-L244",children:"unicodeobject.h"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",metastring:'title="cpython/Include/cpython/unicodeobject.h"',children:"typedef struct {\n    Py_ssize_t ob_refcnt;\n    PyTypeObject *ob_type;\n} PyObject\n/* --- Unicode Type ------------------------------------------------------- */\ntypedef struct {\n    /* There are 4 forms of Unicode strings:\n\n       - compact ascii:\n\n         * structure = PyASCIIObject\n         * test: PyUnicode_IS_COMPACT_ASCII(op)\n         * kind = PyUnicode_1BYTE_KIND\n         * compact = 1\n         * ascii = 1\n         * ready = 1\n         * (length is the length of the utf8 and wstr strings)\n         * (data starts just after the structure)\n         * (since ASCII is decoded from UTF-8, the utf8 string are the data)\n\n       - compact:\n\n         * structure = PyCompactUnicodeObject\n         * test: PyUnicode_IS_COMPACT(op) && !PyUnicode_IS_ASCII(op)\n         * kind = PyUnicode_1BYTE_KIND, PyUnicode_2BYTE_KIND or\n           PyUnicode_4BYTE_KIND\n         * compact = 1\n         * ready = 1\n         * ascii = 0\n         * utf8 is not shared with data\n         * utf8_length = 0 if utf8 is NULL\n         * wstr is shared with data and wstr_length=length\n           if kind=PyUnicode_2BYTE_KIND and sizeof(wchar_t)=2\n           or if kind=PyUnicode_4BYTE_KIND and sizeof(wchar_t)=4\n         * wstr_length = 0 if wstr is NULL\n         * (data starts just after the structure)\n\n       - legacy string, not ready:\n\n         * structure = PyUnicodeObject\n         * test: kind == PyUnicode_WCHAR_KIND\n         * length = 0 (use wstr_length)\n         * hash = -1\n         * kind = PyUnicode_WCHAR_KIND\n         * compact = 0\n         * ascii = 0\n         * ready = 0\n         * interned = SSTATE_NOT_INTERNED\n         * wstr is not NULL\n         * data.any is NULL\n         * utf8 is NULL\n         * utf8_length = 0\n\n       - legacy string, ready:\n\n         * structure = PyUnicodeObject structure\n         * test: !PyUnicode_IS_COMPACT(op) && kind != PyUnicode_WCHAR_KIND\n         * kind = PyUnicode_1BYTE_KIND, PyUnicode_2BYTE_KIND or\n           PyUnicode_4BYTE_KIND\n         * compact = 0\n         * ready = 1\n         * data.any is not NULL\n         * utf8 is shared and utf8_length = length with data.any if ascii = 1\n         * utf8_length = 0 if utf8 is NULL\n         * wstr is shared with data.any and wstr_length = length\n           if kind=PyUnicode_2BYTE_KIND and sizeof(wchar_t)=2\n           or if kind=PyUnicode_4BYTE_KIND and sizeof(wchar_4)=4\n         * wstr_length = 0 if wstr is NULL\n\n       Compact strings use only one memory block (structure + characters),\n       whereas legacy strings use one block for the structure and one block\n       for characters.\n\n       Legacy strings are created by PyUnicode_FromUnicode() and\n       PyUnicode_FromStringAndSize(NULL, size) functions. They become ready\n       when PyUnicode_READY() is called.\n\n       See also _PyUnicode_CheckConsistency().\n    */\n    PyObject_HEAD\n    Py_ssize_t length;          /* Number of code points in the string */\n    Py_hash_t hash;             /* Hash value; -1 if not set */\n    struct {\n        /*\n           SSTATE_NOT_INTERNED (0)\n           SSTATE_INTERNED_MORTAL (1)\n           SSTATE_INTERNED_IMMORTAL (2)\n\n           If interned != SSTATE_NOT_INTERNED, the two references from the\n           dictionary to this object are *not* counted in ob_refcnt.\n         */\n        unsigned int interned:2;\n        /* Character size:\n\n           - PyUnicode_WCHAR_KIND (0):\n\n             * character type = wchar_t (16 or 32 bits, depending on the\n               platform)\n\n           - PyUnicode_1BYTE_KIND (1):\n\n             * character type = Py_UCS1 (8 bits, unsigned)\n             * all characters are in the range U+0000-U+00FF (latin1)\n             * if ascii is set, all characters are in the range U+0000-U+007F\n               (ASCII), otherwise at least one character is in the range\n               U+0080-U+00FF\n\n           - PyUnicode_2BYTE_KIND (2):\n\n             * character type = Py_UCS2 (16 bits, unsigned)\n             * all characters are in the range U+0000-U+FFFF (BMP)\n             * at least one character is in the range U+0100-U+FFFF\n\n           - PyUnicode_4BYTE_KIND (4):\n\n             * character type = Py_UCS4 (32 bits, unsigned)\n             * all characters are in the range U+0000-U+10FFFF\n             * at least one character is in the range U+10000-U+10FFFF\n         */\n        unsigned int kind:3;\n        /* Compact is with respect to the allocation scheme. Compact unicode\n           objects only require one memory block while non-compact objects use\n           one block for the PyUnicodeObject struct and another for its data\n           buffer. */\n        unsigned int compact:1;\n        /* The string only contains characters in the range U+0000-U+007F (ASCII)\n           and the kind is PyUnicode_1BYTE_KIND. If ascii is set and compact is\n           set, use the PyASCIIObject structure. */\n        unsigned int ascii:1;\n        /* The ready flag indicates whether the object layout is initialized\n           completely. This means that this is either a compact object, or\n           the data pointer is filled out. The bit is redundant, and helps\n           to minimize the test in PyUnicode_IS_READY(). */\n        unsigned int ready:1;\n        /* Padding to ensure that PyUnicode_DATA() is always aligned to\n           4 bytes (see issue #19537 on m68k). */\n        unsigned int :24;\n    } state;\n    wchar_t *wstr;              /* wchar_t representation (null-terminated) */\n} PyASCIIObject;\n\n/* Non-ASCII strings allocated through PyUnicode_New use the\n   PyCompactUnicodeObject structure. state.compact is set, and the data\n   immediately follow the structure. */\ntypedef struct {\n    PyASCIIObject _base;\n    Py_ssize_t utf8_length;     /* Number of bytes in utf8, excluding the\n                                 * terminating \\0. */\n    char *utf8;                 /* UTF-8 representation (null-terminated) */\n    Py_ssize_t wstr_length;     /* Number of code points in wstr, possible\n                                 * surrogates count as two code points. */\n} PyCompactUnicodeObject;\n\n/* Strings allocated through PyUnicode_FromUnicode(NULL, len) use the\n   PyUnicodeObject structure. The actual string data is initially in the wstr\n   block, and copied into the data block using _PyUnicode_Ready. */\ntypedef struct {\n    PyCompactUnicodeObject _base;\n    union {\n        void *any;\n        Py_UCS1 *latin1;\n        Py_UCS2 *ucs2;\n        Py_UCS4 *ucs4;\n    } data;                     /* Canonical, smallest-form Unicode buffer */\n} PyUnicodeObject;\n"})}),"\n",(0,i.jsxs)(n.p,{children:["As it's known that each Unicode character in string is represented by a Unicode code point. In ",(0,i.jsx)(n.code,{children:"PyUnicodeObject"}),", these code points are the encoding saved in the ",(0,i.jsx)(n.code,{children:"data"}),", so ",(0,i.jsx)(n.code,{children:"PyUnicodeObject"})," does not use the ",(0,i.jsx)(n.code,{children:"UTF-8"})," encoding in the ",(0,i.jsx)(n.code,{children:"data"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"how-a-unicode-string-object-is-created",children:"How a Unicode string object is created?"}),"\n",(0,i.jsx)(n.p,{children:"Invokes several internal C functions in such a sequence generally,"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:"PyObject *PyUnicode_FromStringAndSize(const char *str, Py_ssize_t size)\n\nPyObject *PyUnicode_DecodeUTF8Stateful(const char *str, Py_ssize_t size, const char *errors, Py_ssize_t *consumed)\n\nstatic PyObject *unicode_decode_utf8(const char *s, Py_ssize_t size, _Py_error_handler error_handler, const char *errors, Py_ssize_t *consumed)\n\nPyObject *PyUnicode_New(Py_ssize_t size, Py_UCS4 maxchar)\n\nstatic Py_ssize_t ascii_decode(const char *start, const char *end, Py_UCS1 *dest)\n\nch = ucs2lib_utf8_decode(&s, end, writer.data, &writer.pos);\n\n// ucs2lib.h\n#define STRINGLIB(F)             ucs2lib_##F\nSTRINGLIB(utf8_decode)(const char **inptr, const char *end,\n                       STRINGLIB_CHAR *dest,\n                       Py_ssize_t *outpos)\n\n"})}),"\n",(0,i.jsx)(n.h2,{id:"inspect-unicode-string-object-in-python-3",children:"Inspect Unicode string object in Python 3"}),"\n",(0,i.jsx)(n.p,{children:"Let's examine the internal data struct of a string object in modern Python 3."}),"\n",(0,i.jsxs)(n.admonition,{type:"note",children:[(0,i.jsxs)(n.p,{children:["You keep the character being referred otherwise the ",(0,i.jsx)(n.code,{children:"GC"})," may release that memory,"]}),(0,i.jsxs)(n.p,{children:["Define the layout mapping ",(0,i.jsx)(n.code,{children:"unicodeobject"}),","]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-py",children:'import ctypes\n\n# It\'s recommended to go to see [python 3.10 unicodeobject.h](https://github.com/python/cpython/blob/3.10/Include/cpython/unicodeobject.h#L85-L244)\nclass PyASCIIObject(ctypes.Structure):\n    # internal fields of the string object\n    _fields_ = [\n        ("ob_refcnt", ctypes.c_long),\n        ("ob_type", ctypes.c_void_p),\n        ("length", ctypes.c_ssize_t),\n        ("hash", ctypes.c_ssize_t),\n        ("interned", ctypes.c_uint, 2),\n        ("kind", ctypes.c_uint, 3),\n        ("compact", ctypes.c_uint, 1),\n        ("ascii", ctypes.c_uint, 1),\n        ("ready", ctypes.c_uint, 1),\n        ("_padding", ctypes.c_uint, 24),\n        ("wstr", ctypes.POINTER(ctypes.c_wchar))\n    ]\n\n    def __repr__(self) -> str:\n        return f"ob_refcnt[{self.ob_refcnt}], length[{self.length}], interned[{self.interned}], kind[{self.kind}], compact[{self.compact}], ascii[{self.ascii}], ready[{self.ready}]"\n    \nclass PyCompactUnicodeObject(PyASCIIObject):\n    # internal fields of the string object\n    _fields_ = [\n        ("utf8_length", ctypes.c_ssize_t),\n        ("utf8", ctypes.POINTER(ctypes.c_char)),\n        ("wstr_length", ctypes.c_ssize_t),\n    ]\n\n    def __repr__(self) -> str:\n        return super().__repr__() + f" utf8_length[{self.utf8_length}], utf8[{self.utf8}], wstr_length[{self.wstr_length}]"\n    \nclass PyUnicodeObject(PyCompactUnicodeObject):\n    class _Data(ctypes.Union):\n        _fields_ = [\n            ("any", ctypes.c_void_p),\n            ("latin1", ctypes.POINTER(ctypes.c_uint8)),\n            ("ucs2", ctypes.POINTER(ctypes.c_uint16)),\n            ("ucs4", ctypes.POINTER(ctypes.c_uint32)),\n        ]\n    \n    _fields_ = [\n        ("data", _Data),\n    ]\n'})}),(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Type: compact ascii. Key fields: kind[1], compact[1], ascii[1], ready[1]"}),"\n"]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-py",children:'>>> string_obj = "Hello, ctypes!"\n>>> addr = id(string_obj)\n>>> ascii_obj = PyASCIIObject.from_address(addr)\n>>> print(ascii_obj)\nob_refcnt[1], length[14], interned[0], kind[1], compact[1], ascii[1], ready[1]\n>>>\n>>> # compact ascii: data starts just after the structure\n>>> data_addr = addr + ctypes.sizeof(PyASCIIObject)\n>>> data = ctypes.cast(data_addr, ctypes.c_char_p)\n>>> print(f"data: {data.value}")\ndata: b\'Hello, ctypes!\'\n'})}),(0,i.jsxs)(n.ol,{start:"2",children:["\n",(0,i.jsxs)(n.li,{children:["Type: compact ",(0,i.jsx)(n.code,{children:"UCS-2"}),". Key fields: kind[1], compact[1], ascii[1], ready[1]"]}),"\n"]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-py",children:'>>> string_obj = "\u4f60\u597d!"\n>>> addr = id(string_obj)\n>>> ascii_obj = PyASCIIObject.from_address(addr)\n>>> print(ascii_obj)\nob_refcnt[1], length[3], interned[0], kind[2], compact[1], ascii[0], ready[1]\n>>>\n>>> compact_obj = PyCompactUnicodeObject.from_address(addr)\n>>> print(compact_obj)\nob_refcnt[1], length[3], interned[0], kind[2], compact[1], ascii[0], ready[1] utf8_length[0], utf8[<ctypes.LP_c_char object at 0x7f0c29297ac\n0>], wstr_length[0]\n>>>\n>>> # compact: data starts just after the structure\n>>> data_addr = addr + ctypes.sizeof(PyCompactUnicodeObject)\n>>> data = ctypes.cast(data_addr, ctypes.POINTER(ctypes.c_uint16))\n>>> print(f"data: {data[0]}, {data[0]:#06x}, {chr(data[0])}")\ndata: 20320, 0x4f60, \u4f60\n>>> print(f"data: {data[1]}, {data[1]:#06x}, {chr(data[1])}")\ndata: 22909, 0x597d, \u597d\n>>> print(f"data: {data[2]}, {data[2]:#06x}, {chr(data[2])}")\ndata: 33, 0x0021, !\n>>> print(f"data: {data[3]}, {data[3]:#06x}, {chr(data[3])}")\ndata: 0, 0x0000,\n'})}),(0,i.jsxs)(n.ol,{start:"3",children:["\n",(0,i.jsxs)(n.li,{children:["Type: compact ",(0,i.jsx)(n.code,{children:"UCS-4"}),". Key fields: kind[4], compact[1], ascii[1], ready[1]"]}),"\n"]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-py",children:'>>> string_obj = "\u4f60\u597d\ud83e\udd28"\n>>> addr = id(string_obj)\n>>> ascii_obj = PyASCIIObject.from_address(addr)\n>>> print(ascii_obj)\nob_refcnt[1], length[3], interned[0], kind[4], compact[1], ascii[0], ready[1]\n>>>\n>>> compact_obj = PyCompactUnicodeObject.from_address(addr)\n>>> print(compact_obj)\nob_refcnt[1], length[3], interned[0], kind[4], compact[1], ascii[0], ready[1] utf8_length[0], utf8[<ctypes.LP_c_char object at 0x7f0c292b1ac\n0>], wstr_length[3]\n>>>\n>>> # compact: data starts just after the structure\n>>> data_addr = addr + ctypes.sizeof(PyCompactUnicodeObject)\n>>> data = ctypes.cast(data_addr, ctypes.POINTER(ctypes.c_uint32))\n>>> print(f"data: {data[0]}, {data[0]:#010x}, {chr(data[0])}")\ndata: 20320, 0x00004f60, \u4f60\n>>> print(f"data: {data[1]}, {data[1]:#010x}, {chr(data[1])}")\ndata: 22909, 0x0000597d, \u597d\n>>> print(f"data: {data[2]}, {data[2]:#010x}, {chr(data[2])}")\ndata: 129320, 0x0001f928, \ud83e\udd28\n>>> print(f"data: {data[3]}, {data[3]:#010x}, {chr(data[3])}")\ndata: 0, 0x00000000,\n'})}),(0,i.jsxs)(n.ol,{start:"4",children:["\n",(0,i.jsx)(n.li,{children:"Type: legacy string. Key fields: kind[2], compact[0], ascii[0]"}),"\n"]}),(0,i.jsx)(n.p,{children:"I can't produce it in Python3.10, maybe you can try python2.7."}),(0,i.jsxs)(n.p,{children:["All codes are at ",(0,i.jsx)(n.a,{href:"../code-snippets/python/c-types/UnicodeObject.py",children:"object layout"})]}),(0,i.jsx)(n.h2,{id:"resources",children:"Resources"}),(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://rushter.com/blog/python-strings-and-memory/",children:"How Python saves memory when storing strings | Artem Golubin"})}),(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://tenthousandmeters.com/blog/python-behind-the-scenes-9-how-python-strings-work/",children:"Python behind the scenes #9: how Python strings work"})}),(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://nedbatchelder.com/text/unipain.html",children:"https://nedbatchelder.com/text/unipain.html"})}),(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://www.joelonsoftware.com/2003/10/08/the-absolute-minimum-every-software-developer-absolutely-positively-must-know-about-unicode-and-character-sets-no-excuses/",children:"https://www.joelonsoftware.com/2003/10/08/the-absolute-minimum-every-software-developer-absolutely-positively-must-know-about-unicode-and-character-sets-no-excuses/"})})]})]})}function l(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>o});var c=t(96540);const i={},s=c.createContext(i);function r(e){const n=c.useContext(s);return c.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),c.createElement(s.Provider,{value:n},e.children)}}}]);