"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4233],{97606:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>m,frontMatter:()=>r,metadata:()=>a,toc:()=>l});var t=o(74848),s=o(28453);const r={authors:["frank"],tags:["python","samba"],description:"benchmark to test the performance of operations in Python",keywords:["performance measure"],image:"https://i.imgur.com/mErPwqL.png",date:new Date("2024-01-12T00:00:00.000Z"),draft:!1,enableComments:!0},i="Python Benchmark",a={id:"python-benchmark",title:"Python Benchmark",description:"benchmark to test the performance of operations in Python",source:"@site/../../docs/python-benchmark.md",sourceDirName:".",slug:"/python-benchmark",permalink:"/docs/python-benchmark",draft:!1,unlisted:!1,editUrl:"https://github.com/liviaerxin/liviaerxin.github.io/edit/master/_ssg/docusaurus/../../docs/python-benchmark.md",tags:[{inline:!0,label:"python",permalink:"/docs/tags/python"},{inline:!0,label:"samba",permalink:"/docs/tags/samba"}],version:"current",lastUpdatedBy:"liviaerxin",lastUpdatedAt:1744599368e3,frontMatter:{authors:["frank"],tags:["python","samba"],description:"benchmark to test the performance of operations in Python",keywords:["performance measure"],image:"https://i.imgur.com/mErPwqL.png",date:"2024-01-12T00:00:00.000Z",draft:!1,enableComments:!0},sidebar:"docs",previous:{title:"Database Migration Using Alembic in Python",permalink:"/docs/python-alembic"},next:{title:"Python C Library",permalink:"/docs/python-c-library"}},c={},l=[{value:"Measuring Lock Performance in Python on Linux",id:"measuring-lock-performance-in-python-on-linux",level:2}];function h(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"python-benchmark",children:"Python Benchmark"}),"\n",(0,t.jsxs)(n.p,{children:["Using Python's ",(0,t.jsx)(n.code,{children:"timeit"})," module to measure the performance of operations in Python quickly."]}),"\n",(0,t.jsx)(n.h2,{id:"measuring-lock-performance-in-python-on-linux",children:"Measuring Lock Performance in Python on Linux"}),"\n",(0,t.jsxs)(n.p,{children:["Here\u2019s a quick look at the cost of acquiring and releasing an ",(0,t.jsx)(n.strong,{children:"uncontended"})," lock using Python\u2019s ",(0,t.jsx)(n.code,{children:"threading.Lock"})," on a Linux system:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sh",children:'$ ./python -m timeit \\\n  -s "from threading import Lock; l=Lock(); a=l.acquire; r=l.release" \\\n  "a(); r()"\n10000000 loops, best of 3: 0.127 usec per loop\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Now, let\u2019s compare that with the cost of calling a ",(0,t.jsx)(n.strong,{children:"dummy Python function"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sh",children:'$ ./python -m timeit -s "def a(): pass" "a(); a()"\n1000000 loops, best of 3: 0.221 usec per loop\n'})}),"\n",(0,t.jsxs)(n.p,{children:["And a trivial ",(0,t.jsx)(n.strong,{children:"C function"})," call (returning the ",(0,t.jsx)(n.code,{children:"False"})," singleton via ",(0,t.jsx)(n.code,{children:"bool()"}),"):"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sh",children:'$ ./python -m timeit -s "a=bool" "a(); a()"\n10000000 loops, best of 3: 0.164 usec per loop\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Interestingly, using a ",(0,t.jsx)(n.code,{children:"Lock"})," as a ",(0,t.jsx)(n.strong,{children:"context manager"})," is actually ",(0,t.jsx)(n.em,{children:"slower"}),", not faster, despite what you might expect:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sh",children:'$ ./python -m timeit -s "from threading import Lock; l=Lock()" \\\n  "with l: pass"\n1000000 loops, best of 3: 0.242 usec per loop\n'})}),"\n",(0,t.jsx)(n.p,{children:"So at least on Linux, there doesn't seem to be much low-hanging fruit left when it comes to optimizing lock performance."}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Bonus:"})," As of recent Python versions, ",(0,t.jsx)(n.code,{children:"RLock"})," is now just as fast as ",(0,t.jsx)(n.code,{children:"Lock"})," in uncontended cases:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sh",children:'$ ./python -m timeit \\\n  -s "from threading import RLock; l=RLock(); a=l.acquire; r=l.release" \\\n  "a(); r()"\n10000000 loops, best of 3: 0.114 usec per loop\n'})})]})}function m(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}},28453:(e,n,o)=>{o.d(n,{R:()=>i,x:()=>a});var t=o(96540);const s={},r=t.createContext(s);function i(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);